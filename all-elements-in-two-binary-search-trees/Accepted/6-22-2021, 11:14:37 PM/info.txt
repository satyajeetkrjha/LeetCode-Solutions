{"id":511880441,"lang":"cpp","time":"1 year, 2 months","timestamp":1624418077,"status_display":"Accepted","runtime":"132 ms","url":"/submissions/detail/511880441/","is_pending":"Not Pending","title":"All Elements in Two Binary Search Trees","memory":"84.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {\n        \n        vector <int> res ;\n        stack <TreeNode* > s1;\n        stack <TreeNode* > s2;\n        // if both root are null and both stacks are empty ,we are done\n        while(root1!=NULL || root2!=NULL || !s1.empty() || !s2.empty()){\n            \n            while(root1!=NULL){\n                s1.push(root1);\n                root1= root1->left;\n            }\n            while(root2!=NULL){\n                s2.push(root2);\n                root2 = root2->left;\n            }\n            \n            if(s2.empty() || (!s1.empty() && s1.top()->val <= s2.top()->val)){\n                root1 = s1.top();\n                s1.pop();\n                res.push_back(root1->val);\n                root1= root1->right;  \n            }\n            else {\n                root2 = s2.top();\n                s2.pop();\n                res.push_back(root2->val);\n                root2= root2->right;\n            }\n            \n        }\n        return res ;\n         \n         \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"all-elements-in-two-binary-search-trees"}