{"id":510786656,"lang":"cpp","time":"1 year, 2 months","timestamp":1624220632,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/510786656/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"13 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void dfs (TreeNode* root ,map <TreeNode*,TreeNode*> &parent){\n        if(!root){\n            return;\n        }\n        if(root->left){\n            parent[root->left]=root;\n        }\n        if(root->right){\n            parent[root->right]= root ;\n        }\n        dfs(root->left,parent);\n        dfs(root->right,parent);\n        return ;\n    }\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n       vector <int > res; \n        if(!root){\n            return res;\n        }\n        map <TreeNode* ,TreeNode* > parent ; // (key is node and val is parent of that node)\n        set <TreeNode*> visited;\n        \n        // construct the graph first\n        dfs(root,parent);\n        queue <TreeNode*> q;\n        q.push(target);\n        int level =0;\n        while(!q.empty()){\n            int sz = q.size();\n            cout<<\"sz is \"<<sz<<endl;\n            for(int i =0;i<sz;i++){\n                TreeNode* cur = q.front();\n                q.pop();\n                visited.insert(cur);\n                cout<<\"level is \"<<level <<endl;\n                if(level == k && cur){\n                    res.push_back(cur->val);\n                }\n                // current node has a parent node and that node is not visited\n                \n                if(parent.count(cur)>0 && parent[cur]!=NULL && visited.find(parent[cur]) == visited.end()){\n                    q.push(parent[cur]);\n                }\n                if(cur->left!=NULL &&  visited.find(cur->left) == visited.end()){\n                    q.push(cur->left);\n                }\n                if(cur->right!=NULL && visited.find(cur->right) == visited.end()){\n                    q.push(cur->right);\n                }\n            }\n            if( level ==k){\n                break;\n            }\n            level++;\n            \n        }\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree"}