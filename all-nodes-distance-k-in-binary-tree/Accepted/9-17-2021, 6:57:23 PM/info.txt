{"id":556681497,"lang":"cpp","time":"11 months, 1 week","timestamp":1631919443,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/556681497/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"13 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    void dfs(TreeNode* root ,map <TreeNode*,TreeNode*> &parent){\n        if(!root) return ;\n        if(root->left!=NULL){\n            parent[root->left] = root;\n        }\n        if(root->right!=NULL){\n            parent[root->right] = root;\n        }\n        dfs(root->left, parent);\n        dfs(root->right,parent);\n    }\n    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {\n        map<TreeNode* ,TreeNode*> parent ;\n        dfs(root,parent);\n        vector <int> res ;\n        queue <TreeNode*> q;\n        q.push(target);\n        int level =0 ;\n        set <TreeNode*> visited ;\n        while(!q.empty()){\n            int sz = q.size();\n            cout<<\"size is \"<<sz<<endl;\n            cout<<\"level is  ...\"<<level <<endl;\n            for(int i =0 ;i<sz;i++){\n                TreeNode* cur = q.front(); \n                q.pop();\n                cout<<\"cur->val is \"<<cur->val <<endl;\n                visited.insert(cur);\n                if(level == k)\n                    res.push_back(cur->val);\n                if(cur->left!=NULL && visited.find(cur->left) == visited.end()){\n                    cout<<\"left pushed with value \"<<cur->left->val <<endl;\n                    q.push(cur->left);\n                }\n                if(cur->right!=NULL && visited.find(cur->right) == visited.end()){\n                    cout<<\"right pushed with value \"<<cur->right->val <<endl;\n                    q.push(cur->right);\n                }\n                if(parent.count(cur)>0 && visited.find(parent[cur]) == visited.end()){\n                    cout<<\"parent pushed ..  \"<<parent[cur]->val <<endl;\n                    q.push(parent[cur]);\n                }    \n            }\n            if(level == k)\n                    break;\n            level++;\n        }\n        return res ;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree"}