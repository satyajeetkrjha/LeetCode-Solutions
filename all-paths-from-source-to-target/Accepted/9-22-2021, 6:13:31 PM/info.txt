{"id":559398117,"lang":"cpp","time":"11 months, 1 week","timestamp":1632348811,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/559398117/","is_pending":"Not Pending","title":"All Paths From Source to Target","memory":"16.6 MB","code":"class Solution {\npublic:\n    bool visited[105];\n    vector <vector <int> > res ;\n    void dfs(vector<vector<int>>& graph, vector <int> temp ,int u ,int destination){\n        if(u == destination){\n            temp.push_back(u);\n            res.push_back(temp);\n            return ;\n        }\n        if(!visited[u])\n            visited[u] = true ;\n        \n        temp.push_back(u);\n        for(int i =0 ;i<graph[u].size();i++){\n            int adjacentnode = graph[u][i];\n            cout<<\"adjacent node is \"<<adjacentnode<<endl;\n            if(!visited[adjacentnode]){\n                dfs(graph ,temp ,adjacentnode ,destination);\n            }\n        }\n        \n        visited[u] = false;\n        \n    }\n    \n    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {\n        int n = graph.size();\n        // mark all nodes as false\n        for(int i =0 ;i<n;i++){\n            visited[i] = false;\n        } \n        vector <int> temp;\n        dfs(graph ,temp ,0 ,n-1);\n        return res ;\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"all-paths-from-source-to-target"}