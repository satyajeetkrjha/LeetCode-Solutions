{"id":570916279,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1634183484,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/570916279/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"class Solution {\npublic:\n    int maxDistance(vector<vector<int>>& grid) {\n        int r = grid.size();\n        int c = grid[0].size();\n        queue <pair <int ,int> > q;\n        \n        for(int i =0 ;i<r;i++){\n            for(int j =0 ;j<c ;j++){\n                if(grid[i][j]){\n                    q.push({i,j});\n                }\n            }\n        }\n        \n        \n        int dx[4] ={-1,1,0,0};\n        int dy[4] ={0,0,1,-1};\n        \n        int maxval =0;\n        cout<<\"q.size() is \"<<q.size() <<endl;\n        while(!q.empty()){\n            pair<int ,int> cur = q.front();\n            q.pop();\n            \n            for(int i =0 ;i<4;i++){\n                int nr = cur.first + dx[i];\n                int nc = cur.second+ dy[i];\n                cout<<\"nr and nc are ..\"<< nr << \" \"<<nc <<endl;\n                if( nr >=0 && nc >=0 && nr < r && nc < c && grid[nr][nc] == 0){\n                    grid[nr][nc] = grid[cur.first][cur.second]+1;\n                    maxval = max(maxval ,grid[nr][nc]);\n                    \n                }\n            }\n            \n            \n            \n        }\n        \n        return maxval > 0 ? maxval -1:-1;\n        \n        \n        \n    }\n};","compare_result":"00110000000000000000000000000000000","title_slug":"as-far-from-land-as-possible"}