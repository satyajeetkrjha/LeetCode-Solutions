{"id":383695594,"lang":"cpp","time":"2Â years","timestamp":1597927342,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/383695594/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"class Solution {\npublic:\n    int dx[4]={0,0,1,-1};\n    int dy[4] ={1,-1,0,0};\n    int maxDistance(vector<vector<int>>& grid) {\n       queue <pair<int,int> > q;\n       for(int i=0;i<grid.size();i++){\n           for(int j=0;j<grid[i].size();j++){\n               if(grid[i][j] ==1){\n                   q.push({i,j});\n               }\n           }\n       }\n        int maxDist = 0;\n       while(!q.empty()){\n           pair <int,int> cur = q.front();\n           q.pop();\n           for(int i=0;i<4;i++){\n               int ndx = cur.first+dx[i];\n               int ndy = cur.first+dy[i];\n               if(ndx >=0 && ndx< grid.size() && ndy >=0 && ndy <grid[0].size() && grid[ndx][ndy] ==0){\n                   grid[ndx][ndy] =grid[cur.first][cur.second]+1;\n                   maxDist = max(maxDist,grid[ndx][ndy]);\n                   q.push({ndx,ndy});\n               }\n           }\n       } \n       return maxDist > 0 ? maxDist:-1;\n    }\n};","compare_result":"10111111010000000000000101001100100","title_slug":"as-far-from-land-as-possible"}