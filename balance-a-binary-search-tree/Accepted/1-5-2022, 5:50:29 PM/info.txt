{"id":613839656,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1641423029,"status_display":"Accepted","runtime":"1646 ms","url":"/submissions/detail/613839656/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"664.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    vector <int> vec;\n    void inorder(TreeNode* root){\n        if(!root) return ;\n        inorder(root->left);\n        vec.push_back(root->val);\n        inorder(root->right);\n    }\n    TreeNode* build(vector <int> v ,int left ,int right){\n        if(left > right){\n            return NULL;\n        }\n        int mid = (left+right)/2 ;\n        TreeNode* root = new TreeNode(v[mid]);\n        root->left = build(v,left ,mid-1);\n        root->right = build(v,mid+1,right);\n        return root;\n    }\n    TreeNode* balanceBST(TreeNode* root) {\n        inorder(root);\n        int left =0 ;\n        int right = vec.size() -1;\n        TreeNode* res = build(vec,left ,right);\n        return res ;\n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree"}