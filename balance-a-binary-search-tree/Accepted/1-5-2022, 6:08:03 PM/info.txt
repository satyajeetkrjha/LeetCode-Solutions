{"id":613847504,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1641424083,"status_display":"Accepted","runtime":"1636 ms","url":"/submissions/detail/613847504/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"664.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector <int> v ;\n    void inorder(TreeNode* root){\n        if(!root) return ;\n        inorder(root->left);\n        v.push_back(root->val);\n        inorder(root->right);\n    }\n    \n    TreeNode* build(vector<int> v ,int low ,int high){\n        if(low > high){\n            return NULL ;\n        }\n        int mid =(low+ high)/2;\n        TreeNode* root = new TreeNode(v[mid]);\n        root->left = build(v,low ,mid-1);\n        root->right = build(v ,mid+1,high);\n        return root ;\n    }\n    TreeNode* balanceBST(TreeNode* root) {\n        inorder(root);\n        int low = 0 ;\n        int high = v.size()-1;\n        TreeNode* res = build(v,low ,high);\n        return res ;\n        \n    }\n};","compare_result":"11111111111111111","title_slug":"balance-a-binary-search-tree"}