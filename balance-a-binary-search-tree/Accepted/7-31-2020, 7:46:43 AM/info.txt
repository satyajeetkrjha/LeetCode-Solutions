{"id":374017804,"lang":"cpp","time":"2Â years","timestamp":1596196003,"status_display":"Accepted","runtime":"156 ms","url":"/submissions/detail/374017804/","is_pending":"Not Pending","title":"Balance a Binary Search Tree","memory":"56.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector <int> v;\n     void  inorder( TreeNode* root){\n        if(root ==NULL )\n            return ;\n         inorder(root->left);\n         v.push_back(root->val);\n         inorder(root->right);\n    }\n    TreeNode* balance(int left, int right){\n       if(left>right){\n           return NULL;\n       }\n       int mid =(right+left)/2;\n       TreeNode* root = new TreeNode (v[mid]); // create a new node\n        root ->left = balance(left,mid-1);\n        root->right = balance(mid+1,right);\n        return root ;\n    }\n    TreeNode* balanceBST(TreeNode* root) {\n        if(root ==NULL)\n            return root ;\n        // first converting binary search treee into sorted array \n        inorder(root);\n        for(int i=0;i<v.size();i++){\n            cout<<v[i]<<\" \";\n        }\n        cout<<endl;\n        // now converted the sorted array into bst \n        int left = 0;\n        int  right= v.size()-1;\n        TreeNode* ans = balance(left ,right);\n        return ans ;\n    }\n};","compare_result":"1111111111111111","title_slug":"balance-a-binary-search-tree"}