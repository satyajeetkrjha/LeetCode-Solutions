{"id":504114958,"lang":"cpp","time":"1 year, 2 months","timestamp":1623018585,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/504114958/","is_pending":"Not Pending","title":"Binary Tree Longest Consecutive Sequence","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int maxval =1;\n    void dfs(TreeNode* root,int val){\n        if(!root){\n            return ;\n        }\n        \n        if (root->left !=NULL &&  root->left->val - root->val == 1){\n            val++;\n            maxval =max(maxval,val);\n            cout <<\"root->left val is \"<<root->left->val<<endl;\n            cout <<\"root->val is \"<<root->val <<endl;\n            cout <<\"val is \"<<val <<endl;\n            dfs(root->left,val);\n        \n        }\n        else{\n            dfs(root->left,val);\n        }\n         \n        if(root->right !=NULL && root->right->val - root->val ==1){\n            val ++;\n            maxval =max(maxval,val);\n            cout <<\"root->right val is \"<<root->right->val<<endl;\n            cout <<\"root->val is \"<<root->val <<endl;\n            cout <<\"val is \"<<val <<endl;\n            dfs(root->right,val);\n        }\n        else{\n           dfs(root->right,val);   \n        }\n      \n        \n    }\n    int longestConsecutive(TreeNode* root) {\n        if(!root){\n            return 0;\n        }\n        dfs(root,1);\n        return maxval;\n        \n    }\n};","compare_result":"11111111101111111111111111110111111011111111100001111","title_slug":"binary-tree-longest-consecutive-sequence"}