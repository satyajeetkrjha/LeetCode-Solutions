{"id":500440635,"lang":"cpp","time":"1 year, 2 months","timestamp":1622391324,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/500440635/","is_pending":"Not Pending","title":"Binary Tree Vertical Order Traversal","memory":"12.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> verticalOrder(TreeNode* root) {\n       \n        // For approach https://www.youtube.com/watch?v=PQKkr036wRc\n        map <int ,vector <int>> m; // for every horizontal distance, we will store all corresponding node's values for that distance \n        queue <pair<TreeNode*,int>>q;\n        vector <vector <int> > ans;\n        if(!root){\n            return ans;\n        }\n        q.push({root,0});\n        while(!q.empty()){\n            int sz =q.size();\n            for(int i=0;i<sz;i++){\n               TreeNode* currNode =q.front().first;\n               int currdist=q.front().second;\n                q.pop();\n                m[currdist].push_back(currNode->val); // map a key to vector so push\n                if(currNode->left){\n                    q.push({currNode->left,currdist-1});\n                }\n                if(currNode->right){\n                    q.push({currNode->right,currdist+1});\n                }\n                \n                \n            }\n        }\n        for (auto i :m){\n           \n            ans.push_back(i.second);\n        }\n        return ans;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-vertical-order-traversal"}