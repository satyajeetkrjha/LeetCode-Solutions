{"id":616851390,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1641805313,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/616851390/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"10.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n        queue <TreeNode*> q;\n        q.push(root);\n        bool foundNull = false;\n        while(!q.empty()){\n            auto curr = q.front();\n            q.pop();\n            if(curr == NULL){\n                foundNull = true ;\n            }\n            else{\n                // we already came across a null node before and we still have nodes in queue \n                if(foundNull){\n                    return false;\n                }\n            \n                q.push(curr->left);\n                q.push(curr->right);\n            }\n            \n        }\n        return true ;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree"}