{"id":370724874,"lang":"cpp","time":"2 years, 1 month","timestamp":1595539582,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/370724874/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"10.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isCompleteTree(TreeNode* root) {\n       queue<TreeNode*>q;\n        q.push(root);\n        bool flag  =false;\n        while(!q.empty()){\n            TreeNode* cur = q.front();\n            q.pop();\n            if(cur ==NULL){\n                flag =true;\n            }\n            else if( cur !=NULL && flag){\n                return false;\n            }\n            else{\n                q.push(cur->left);\n                q.push(cur->right);\n            }\n            \n            \n        }\n        return true;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree"}