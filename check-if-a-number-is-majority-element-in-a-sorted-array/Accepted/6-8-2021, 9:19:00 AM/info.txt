{"id":504921379,"lang":"cpp","time":"1 year, 2 months","timestamp":1623158340,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/504921379/","is_pending":"Not Pending","title":"Check If a Number Is Majority Element in a Sorted Array","memory":"7.5 MB","code":"class Solution {\npublic:\n    int firstoccurence(vector <int> &nums,int target){\n        int ans =-1;\n        int low =0;\n        int high = nums.size()-1;\n        while(low <=high){\n            int mid =(low +high)/2;\n            if(nums[mid]<target){\n                low =mid+1;\n            }\n            else if(nums[mid]>target){\n                high =mid -1;\n            }\n            else if( nums[mid] == target){\n                ans =mid;\n                high =mid -1;\n            }\n        }\n        return ans ;\n    }\n    int lastoccurence(vector <int> & nums ,int target){\n         int ans =-1;\n        int low =0;\n        int high = nums.size()-1;\n        while(low <=high){\n            int mid =(low +high)/2;\n            if(nums[mid]<target){\n                low =mid+1;\n            }\n            else if(nums[mid]>target){\n                high =mid -1;\n            }\n            else if( nums[mid] == target){\n                ans =mid;\n                low =mid+1;\n            }\n        }\n        return ans ;\n    }\n    \n    bool isMajorityElement(vector<int>& nums, int target) {\n        //find first occurence and last occurence using binary serach varinat \n        int index1 = firstoccurence(nums,target);\n        int index2 =lastoccurence(nums,target);\n        if (index1 == -1 || index2 ==-1 ){\n            return false ;\n        }\n        int n =nums.size();\n        if((index2-index1+1)> n/2)\n        return true;\n        else\n            return false ;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"check-if-a-number-is-majority-element-in-a-sorted-array"}