{"id":504920861,"lang":"cpp","time":"1 year, 2 months","timestamp":1623158243,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/504920861/","is_pending":"Not Pending","title":"Check If a Number Is Majority Element in a Sorted Array","memory":"N/A","code":"class Solution {\npublic:\n    int firstoccurence(vector <int> &nums,int target){\n        int ans =-1;\n        int low =0;\n        int high = nums.size()-1;\n        while(low <=high){\n            int mid =(low +high)/2;\n            if(nums[mid]<target){\n                low =mid+1;\n            }\n            else if(nums[mid]>target){\n                high =mid -1;\n            }\n            else if( nums[mid] == target){\n                ans =mid;\n                high =mid -1;\n            }\n        }\n        return ans ;\n    }\n    int lastoccurence(vector <int> & nums ,int target){\n         int ans =-1;\n        int low =0;\n        int high = nums.size()-1;\n        while(low <=high){\n            int mid =(low +high)/2;\n            if(nums[mid]<target){\n                low =mid+1;\n            }\n            else if(nums[mid]>target){\n                high =mid -1;\n            }\n            else if( nums[mid] == target){\n                ans =mid;\n                low =mid+1;\n            }\n        }\n        return ans ;\n    }\n    \n    bool isMajorityElement(vector<int>& nums, int target) {\n        //find first occurence and last occurence using binary serach varinat \n        int index1 = firstoccurence(nums,target);\n        int index2 =lastoccurence(nums,target);\n        return index2-index1+1;\n    }\n};","compare_result":"1001001010101010101010101010101010000","title_slug":"check-if-a-number-is-majority-element-in-a-sorted-array"}