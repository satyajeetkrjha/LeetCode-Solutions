{"id":610871751,"lang":"cpp","time":"7 months, 3 weeks","timestamp":1641052391,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/610871751/","is_pending":"Not Pending","title":"Closest Binary Search Tree Value II","memory":"21.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector <int> vec;\n    void dfs(TreeNode* root){\n        if(!root) return ;\n        dfs(root->left);\n        vec.push_back(root->val);\n        dfs(root->right);\n    }\n    vector<int> closestKValues(TreeNode* root, double target, int k) {\n        \n        dfs(root);\n        int left = 0 ;\n        int n = vec.size();\n        int right = n-k;\n        \n        while (left<right){\n            int mid = (right+left)/2;\n            if(target- vec[mid] > vec[mid+k] -target){\n                left = mid+1;\n            }\n            else{\n                right = mid;\n            }\n        }\n        vector <int> res ;\n        for(int i= left ;i<left+k;i++){\n            res.push_back(vec[i]);\n        }\n        \n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"closest-binary-search-tree-value-ii"}