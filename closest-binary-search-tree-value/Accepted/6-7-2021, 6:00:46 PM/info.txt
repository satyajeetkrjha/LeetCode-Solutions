{"id":504613672,"lang":"cpp","time":"1 year, 2 months","timestamp":1623103246,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/504613672/","is_pending":"Not Pending","title":"Closest Binary Search Tree Value","memory":"21 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void minDiffFun(TreeNode *root,double target,double &minDiff, int &closestnode){\n        if(root == NULL){\n            return ;\n        }\n        double diff = abs(root->val -target);\n        \n        if(minDiff > diff){\n            minDiff =diff;\n            cout<<\"minDiff in if  \"<<minDiff<<endl;\n            cout <<\"val is \"<<root->val<<endl;\n            closestnode =root->val;\n        }\n        if (target <root->val){\n            minDiffFun(root->left,target,minDiff,closestnode);\n        }\n        else {\n             minDiffFun(root->right,target,minDiff,closestnode);\n        }\n    }\n    int closestValue(TreeNode* root, double target) {\n        double minDiff = abs(root->val - target);\n        cout<<\"minDiff first \"<<minDiff<<endl;\n        int closestnode =root->val;\n        minDiffFun(root,target,minDiff,closestnode);\n        return closestnode;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"closest-binary-search-tree-value"}