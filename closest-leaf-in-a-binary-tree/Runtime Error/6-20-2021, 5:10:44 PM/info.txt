{"id":510802517,"lang":"cpp","time":"1 year, 2 months","timestamp":1624223444,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/510802517/","is_pending":"Not Pending","title":"Closest Leaf in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void dfs(TreeNode* root, map <TreeNode*,TreeNode*> parents){\n        if(!root){\n            return ;\n        }\n        if(root->left){\n            parents[root->left]=root;\n        }\n        if(root->right){\n            parents[root->right]=root;\n        }\n        dfs(root->left,parents);\n        dfs(root->right,parents);\n        return;\n    }\n    TreeNode* targetNode(TreeNode* root,int k){\n        if(!root)\n            return NULL;\n        targetNode(root->left,k);\n        if(root->val == k){\n            return root;\n        }\n        targetNode(root->right,k);\n        return NULL;\n    }\n    int findClosestLeaf(TreeNode* root, int k) {\n      map <TreeNode*,TreeNode*> parents;\n      set <TreeNode*> visited;\n      dfs(root,parents);\n      queue <TreeNode*> q;\n      TreeNode* target = targetNode(root,k);\n        \n      q.push(target);\n        int ans =-1;\n      while(!q.empty()){\n          int sz = q.size();\n          for(int i=0;i<sz;i++){\n              TreeNode* cur = q.front();\n              q.pop();\n              visited.insert(cur);\n              if(cur->left == NULL && cur->right ==NULL){\n                  ans = cur->val;\n                  return ans;\n              }\n              if(parents[cur] && visited.find(parents[cur]) == visited.end()){\n                  q.push(parents[cur]);\n              }\n              if(cur->left && visited.find(cur->left) == visited.end()){\n                  q.push(cur->left);\n              }\n              if(cur->right && visited.find(cur->right) == visited.end()){\n                  q.push(cur->right);\n              }\n              \n          }\n      }   \n        return ans;\n        \n        \n    }\n};","compare_result":"110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"closest-leaf-in-a-binary-tree"}