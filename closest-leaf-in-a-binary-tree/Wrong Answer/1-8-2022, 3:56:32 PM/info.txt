{"id":615778498,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1641675392,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/615778498/","is_pending":"Not Pending","title":"Closest Leaf in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n     map <TreeNode* ,TreeNode*> parents ;\n      set <TreeNode*> visited ;\n    void dfs(TreeNode* cur ,int key){\n        if(!cur){\n            return ;\n        }\n        if(cur->left){\n            parents[cur->left] = cur;  \n        }\n        if(cur->right){\n            parents[cur->right] = cur ;\n           \n        }\n          dfs(cur->left,key);\n          dfs(cur->right,key);\n        \n        return ;\n    }\n    \n    TreeNode* targetNode(TreeNode* root,int key){\n        if(!root){\n            return NULL;\n        }\n        if(root->val == key){\n            return root ;\n        }\n        TreeNode* left = targetNode(root->left ,key);\n        TreeNode* right = targetNode(root->right,key);\n        if(!left){\n            return right;\n        }\n        return left ;\n    }\n    \n    int findClosestLeaf(TreeNode* root, int k) {\n      \n       queue<TreeNode*> q ;\n       dfs(root,k); \n       TreeNode* source = targetNode(root,k); \n       q.push(source);\n        int ans = 0;\n       while(!q.empty()){\n           int sz = q.size();\n           for(int i =0 ;i<sz;i++){\n               TreeNode* cur = q.front();\n               q.pop();\n               visited.insert(cur);\n               if(cur->left == NULL  && cur->right == NULL){\n                   ans = cur->val ;\n                   break;\n               }\n               if(parents[cur] && visited.find(parents[cur]) == visited.end()){\n                   q.push(parents[cur]);\n               }\n               if(cur->left && visited.find(cur->left) == visited.end()){\n                   q.push(cur->left);\n               }\n               if(cur->right && visited.find(cur->right) == visited.end()){\n                   q.push(cur->right);\n               }\n           }\n       }\n        return ans ;\n        \n        \n    }\n};","compare_result":"110100010001110011110011100110001100111100111001110011100110101100011000111111111111001111001110011011011001110011011010101101101011010001100011001011111111111111111111111111111110011110011100110110101101100111001101101011010101101101011010110101101000110001100101001011111111111111111111111111111111111111111111111111110100000100101001","title_slug":"closest-leaf-in-a-binary-tree"}