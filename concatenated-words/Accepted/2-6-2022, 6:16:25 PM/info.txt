{"id":636023661,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1644189385,"status_display":"Accepted","runtime":"342 ms","url":"/submissions/detail/636023661/","is_pending":"Not Pending","title":"Concatenated Words","memory":"242.5 MB","code":"class Solution {\n    struct trie{\n\t    struct trie* arr[26];\n\t    bool end = false;\n\t    trie() {\n\t\t    memset(arr,0,sizeof(arr));\n\t\t    end = false;\n\t    }\n    };\n\n    trie* root;\n\n    void insert(string s){\n        trie* node = root;\n        /* \n         * inserting the string in reverse order as we will search from the\n         * end (i.e. suffix) of the word while using DP.\n         */\n        for(int i = s.length()-1; i >= 0; i--) {\n            char ch = s[i];\n            if(!node->arr[ch-'a']) {\n                node->arr[ch-'a'] = new trie();\n            }\n            node = node->arr[ch-'a'];\n        }\n        node->end = true;\n    }\npublic:\n    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {\n        /* \n         * every word can be generated by concatinating smaller words only,\n         * so smaller words will be processed and inserted into trie first \n         */\n        sort(words.begin(), words.end(), [](const string& w1, const string& w2) {\n            return (w1.size() < w2.size());\n        });\n        \n        vector<string> ret;\n        root = new trie();\n        \n        for(string w : words) {\n            if(w.length() == 0)\n                continue;\n            \n            vector<bool> dp(w.length()+1, false);\n            dp[0] = true;\n            for(int i = 0; i < w.length(); i++) {\n                trie* node = root;\n                for(int j = i; j >= 0; j--) {\n                    /* \n                     * instead of keeping the smaller words into a map and \n                     * searching in the map after doing substr() which is O(n)\n                     * operation, trie is being used here to achieve constant \n                     * time search operation of current suffix\n                     */ \n                    if(node->arr[w[j]-'a'] == NULL)\n                        break;\n                    node = node->arr[w[j]-'a'];\n                    if(dp[j] && node->end) {\n                        dp[i+1] = true;\n                        break;\n                    }\n                }\n            }\n            \n            if(dp[w.length()])\n                ret.push_back(w);\n            \n            insert(w);\n        }\n        \n        return ret;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"concatenated-words"}