{"id":636169528,"lang":"cpp","time":"6 months, 2 weeks","timestamp":1644206655,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/636169528/","is_pending":"Not Pending","title":"Concatenated Words","memory":"N/A","code":"\n\nstruct Node{\n   \n    Node* links[26];\n    bool flag = false;\n\n    bool containsKey(char ch){\n        return (links[ch-'a']!=NULL);\n    }\n    Node* get(char ch){\n        return links[ch-'a'];\n    }\n    void put (char ch,Node* node){\n        links[ch-'a'] =node;\n    }\n    void markEnd(){\n        flag = true;\n    }\n    \n    bool endsWith(){\n        return flag ;\n    }\n    \n};\n\n\nclass Solution {\n    \nprivate:\n    Node* root;\n    \npublic:\n     Solution(){\n        root = new Node();\n    }\n    \n    void insert(string word){\n        Node* node = root ;\n        for(int i = word.size()-1;i>=0;i--){\n           char ch = word[i];\n            if(!node->containsKey(ch)){\n               node->put(ch ,new Node());   \n            }\n            node = node->get(ch);\n            \n        }\n        node->markEnd();\n    }\n    \n    vector<string> findAllConcatenatedWordsInADict(vector<string>& words) {\n        \n        vector<string> ret ;\n        if(words.size() ==0){\n            return ret ;\n        }\n        \n        sort(words.begin(),words.end(),[](const string& w1,const string& w2){\n            return w1.size()<=w2.size();\n        });\n        \n        \n        \n        for(auto &word:words){\n            \n            \n           \n            Node *node = root;\n        \n            vector <bool> dp(word.size()+1,0);\n            dp[0] =1;\n            \n            for(int i =0 ;i<word.size();i++){\n                node = root ;\n                for(int j = i;j>=0 ;j--){\n                    char ch = word[j];\n                    if(!node->containsKey(ch)){\n                        break;\n                    }\n                    node =node->get(ch);\n                    if(dp[j] && node->endsWith()){\n                        dp[i+1] = true;\n                        break;\n                    }        \n                }\n            }\n            if(dp[word.size()])\n                ret.push_back(word);\n            \n            insert(word);\n            \n        }\n        \n        return ret ;\n             \n    }\n};","compare_result":"110110000000000000000000000000000000000000000","title_slug":"concatenated-words"}