{"id":722022110,"lang":"cpp","time":"2 months, 1 week","timestamp":1655207210,"status_display":"Accepted","runtime":"448 ms","url":"/submissions/detail/722022110/","is_pending":"Not Pending","title":"Connecting Cities With Minimum Cost","memory":"46.8 MB","code":"class Solution {\npublic:\n    \n    static bool compare(vector <int> &a ,vector<int> &b){\n        return a[2]<b[2];\n    }\n    \n    vector <int> parent ;\n    \n    int findparent (int u){\n        while(parent[u]!=u){\n            u = parent[u];\n        }\n        return u ;\n    }\n    \n    \n    \n    \n    int minimumCost(int n, vector<vector<int>>& connections) {\n     \n        sort(connections.begin(),connections.end(),compare);\n        \n        parent.resize(n+2);\n        for(int i = 1;i<=n;i++){\n            parent[i] = i;\n        }\n        \n        \n        int cost = 0;\n        int edgestaken = 0;\n        for(int i =0 ;i< connections.size();i++){\n            vector <int> temp = connections[i];\n            int u = temp[0];int v = temp[1];int w = temp[2];\n            int p1 = findparent(u);\n            int p2 = findparent(v);\n            if(p1!=p2){\n                cost+= w;\n                edgestaken++;\n                parent[p1] = p2 ; // most crucial\n            }\n        }\n    \n        if(edgestaken == n-1){\n            return cost ;\n        }\n        return -1;\n        \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"connecting-cities-with-minimum-cost"}