{"id":515830724,"lang":"cpp","time":"1 year, 1 month","timestamp":1625141418,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/515830724/","is_pending":"Not Pending","title":"Connecting Cities With Minimum Cost","memory":"N/A","code":"class Solution {\npublic:\n    vector <int> parent ;\n    static bool comp(const vector <int> &a ,const vector <int> &b){\n        return a[2]< b[2];\n    }\n    int find(int i){\n       if (parent[i] != i) parent[i] = find(parent[i]);\n        return parent[i];\n    }\n    int minimumCost(int n, vector<vector<int>>& connections) {\n      sort(connections.begin(),connections.end(),comp);\n      \n        parent.resize(n+1,0);\n        for(int i =1;i<=n;i++){\n            parent[i]=i;\n        }\n      int nodes =1;\n      int  cost =0;\n      for(int i =0;i<connections.size();i++){\n          vector <int> vec  = connections[i];\n          int u = vec[0];\n          int v= vec[1];\n          int w = vec[2];\n          // cout<<\"vec.size is \"<<vec.size()<<endl;\n          int root1= find(u);\n          int root2 = find(v);\n          if(root1!=root2){\n              cost+=w;\n              nodes++;\n              parent[u]=v;\n          }\n          if(nodes == n) return cost;\n      }  \n     return -1;   \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111000000000000","title_slug":"connecting-cities-with-minimum-cost"}