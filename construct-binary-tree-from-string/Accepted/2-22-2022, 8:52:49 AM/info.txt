{"id":646756656,"lang":"cpp","time":"6Â months","timestamp":1645537969,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/646756656/","is_pending":"Not Pending","title":"Construct Binary Tree from String","memory":"199.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n#include <string>\nclass Solution {\npublic:\n    int start =0;\n    TreeNode* str2tree(string s) {\n        if(start>=s.size()){\n            return NULL;\n        }\n        \n        bool neg = false;\n        if(s[start] == '-'){\n            neg = true;\n            start ++;\n        }\n        \n        int num =0 ;\n        \n        while(start <s.size() && isdigit(s[start])){\n            num = num*10 + (s[start]-'0');\n            start ++;\n        }\n        \n        if(neg) num = num *-1;\n        \n        TreeNode* root = new TreeNode(num);\n        \n        if(start >= s.size()){\n            return root;\n        }\n        \n        if(start < s.size() && s[start] == '('){\n            start ++;\n            root->left = str2tree(s);\n        }\n        if(start < s.size() && s[start] == ')'){\n            start ++;\n            return root ;\n        }\n        if(start < s.size() && s[start] =='('){\n            start ++;\n            root->right = str2tree(s);\n        }\n        if(start < s.size() && s[start]  ==')'){\n            start ++;\n            return root ;\n        }\n    \n        return root ;\n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-string"}