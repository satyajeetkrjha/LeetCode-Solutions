{"id":556305291,"lang":"cpp","time":"11 months, 1 week","timestamp":1631856674,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/556305291/","is_pending":"Not Pending","title":"Convert BST to Greater Tree","memory":"33.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* convertBST(TreeNode* root) {\n      stack <TreeNode*> st;\n      if(!root) return root ;\n      int sum = 0 ;\n        TreeNode* node = root; // node is pointing to root\n      while(!st.empty() || node!=NULL){\n          \n          while(node!=NULL){\n              st.push(node);\n              node = node->right;\n          }\n       //   cout<<\"stack size is \"<<st.size()<<endl;\n          node = st.top(); st.pop();\n          sum += node->val ;\n          node->val = sum;\n          node = node ->left;\n          \n          \n      } \n        return root ;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"convert-bst-to-greater-tree"}