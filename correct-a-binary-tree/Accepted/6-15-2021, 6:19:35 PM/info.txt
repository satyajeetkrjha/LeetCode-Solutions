{"id":508484662,"lang":"cpp","time":"1 year, 2 months","timestamp":1623795575,"status_display":"Accepted","runtime":"104 ms","url":"/submissions/detail/508484662/","is_pending":"Not Pending","title":"Correct a Binary Tree","memory":"67 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\nclass Solution {\npublic:\n    // since the defected node is the same level so we can use a reverse level order traversal \n    // note that the right node of a certain node is defected so doing reverse level order traversal makes sense\n    // also we should keep a set of all visited verties for a level and clear them too \n    \n    TreeNode* correctBinaryTree(TreeNode* root) {\n        set<TreeNode*> seen;\nqueue<TreeNode*> bfsq;\n\nbfsq.push(root);\nseen.insert(root);\n\nwhile(!bfsq.empty()) {\n  auto cur = bfsq.front(); bfsq.pop();\n  if(cur->right) {\n    if(seen.count(cur->right->right)) {cur->right = NULL; return root;}\n    bfsq.push(cur->right); \n      seen.insert(cur->right);\n      \n  }\n  if(cur->left) {\n    if(seen.count(cur->left->right)) {cur->left = NULL; return root;}\n    bfsq.push(cur->left); seen.insert(cur->left);\n  }\n}\nreturn root;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"correct-a-binary-tree"}