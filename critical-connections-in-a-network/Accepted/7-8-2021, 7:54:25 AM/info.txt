{"id":519255338,"lang":"cpp","time":"1 year, 1 month","timestamp":1625745265,"status_display":"Accepted","runtime":"940 ms","url":"/submissions/detail/519255338/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"193 MB","code":"class Solution {\npublic:\n    vector <int> disc;\n    vector <int> low ;\n    vector <int> parent;\n    vector < vector <int > > ans ;\n    vector < vector <int> > adj;\n    \n    int time =0;\n    void dfs(int u){\n        disc[u] = low[u]=time++;\n        // cout <<\"dfs starts at node \"<<u<<endl;\n        for(int i =0;i<adj[u].size();i++){\n            int v= adj[u][i];\n            // cout<<\" neighbour of node \"<<u<< \" is \"<<v<<endl;\n            if(disc[v]== -1){\n                parent[v] =u ;\n                dfs(v);\n                \n                // cout<<\"v is \"<<v << \" and low[\"<<v<<\" ] is \"<<low[v]<<endl;\n                // cout<<\"u is \"<<u << \" and disc [\" <<u<<\" ] is \"<<disc[u]<<endl;\n                if(low [v] >disc[u]){\n                    // cout<<\"Brifge code\"<<endl;\n                    ans.push_back({v,u});\n                      // cout<<\"Brifge code over\"<<endl;\n                }\n                low[u] = min(low[u],low[v]);\n            }\n            else if ( v!= parent [u]){\n                // cout<<\"Back edge found \"<<endl;\n                // cout<<\"u is \"<<u << \" and low[\"<<u<<\" ] is \"<<low[u]<<endl;\n                  // cout<<\"v is \"<<v << \" and low[\"<<v<<\" ] is \"<<low[v]<<endl;\n                low[u] = min(low[u],low[v]);\n                // cout<<\"Updated low  for u \"<<u << \" is \"<<low[u]<<endl;\n                // cout<<\"Back edge over\"<<endl;\n            }\n        }\n        \n    }\n    \n    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {\n        low.resize(n,-1);\n        disc.resize(n,-1);\n        parent.resize(n,-1);\n        \n        adj.resize(n);\n        for(int i =0;i<connections.size();i++){\n            vector <int> v = connections[i];\n            int a = v[0];int b = v[1];\n            adj[a].push_back(b);\n            adj[b].push_back(a);\n        }\n        for(int i =0;i<n;i++){\n            if(disc[i] == -1){\n                dfs(i);\n            }\n        }\n        return ans ;\n    }\n};","compare_result":"111111111111111","title_slug":"critical-connections-in-a-network"}