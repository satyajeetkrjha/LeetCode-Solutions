{"id":618047521,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1641957837,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/618047521/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"25.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    set <int> nodestodelete;\n    vector <TreeNode*> res ;\n    \n    void dfs(TreeNode *&root){\n        if(!root){\n            return;\n        }\n        dfs(root->left);\n        dfs(root->right);\n        if(root!=NULL && nodestodelete.count(root->val)==1){\n           // cout <<\"root to be deleted\"<<root->val <<endl;\n            if(root->left){\n                res.push_back(root->left);\n            }\n            if(root->right){\n                res.push_back(root->right);\n            }\n            root =NULL;\n            delete root ;\n        }\n    }\n    \n    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {\n        nodestodelete.clear();\n        res.clear();\n        nodestodelete.insert(to_delete.begin(),to_delete.end());\n        dfs(root);\n        if(root!=NULL && nodestodelete.count(root->val) == 0){\n            res.push_back(root);\n        }\n        return res ;\n        \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest"}