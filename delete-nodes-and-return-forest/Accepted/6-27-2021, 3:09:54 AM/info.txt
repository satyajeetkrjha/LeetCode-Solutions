{"id":513818220,"lang":"cpp","time":"1 year, 1 month","timestamp":1624777794,"status_display":"Accepted","runtime":"948 ms","url":"/submissions/detail/513818220/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"416.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    void dfs(TreeNode *&root,set <int> todeletenodes, vector <TreeNode*> &res){\n        if(root == NULL)\n            return ;\n        \n        dfs(root->left,todeletenodes,res);\n        dfs(root->right,todeletenodes,res);\n        \n        if(root!=NULL && todeletenodes.count(root->val) ==1 ){\n            \n            if(root->left !=NULL){\n                res.push_back(root->left);\n            }\n            if(root->right !=NULL){\n                res.push_back(root->right);\n            }\n            root=NULL;\n            delete root;\n        }  \n    }\n    vector<TreeNode*> delNodes(TreeNode* root, vector<int>& to_delete) {\n        vector <TreeNode*> res ;\n        set <int> todeletenodes;\n        res.clear();\n        todeletenodes.clear();\n        \n        for(int i =0;i<to_delete.size();i++){\n           todeletenodes.insert(to_delete[i]);\n        }\n        \n        dfs(root,todeletenodes,res);\n        \n        if(root!=NULL && todeletenodes.count(root->val)==0){\n            res.push_back(root);\n        }\n        return res ;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest"}