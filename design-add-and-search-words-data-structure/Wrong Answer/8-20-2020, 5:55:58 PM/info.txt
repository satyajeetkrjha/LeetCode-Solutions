{"id":383894709,"lang":"cpp","time":"2Â years","timestamp":1597960558,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/383894709/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"class WordDictionary {\npublic:\n    struct Node{\n      bool isEnd =false;\n      Node* children[26]  ={NULL}; \n    };\n    Node *root;\n    /** Initialize your data structure here. */\n    WordDictionary() {\n       root = new Node();\n    }\n    \n    /** Adds a word into the data structure. */\n    void addWord(string word) {\n        Node * temp = new Node();\n        for(int i=0;i<word.size();i++){\n            char c= word[i];\n            if(temp->children[c-'a'] ==NULL){\n                temp->children[c-'a'] = new Node();\n            }\n            temp = temp->children[c-'a'];\n        }\n        temp->isEnd =true;\n    }\n    \n    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */\n     bool searchFun(string word,int index,Node *temp){\n        if(temp ==NULL){\n            return false;\n        }\n         if(index == word.length()){\n             cout<<\"temp->isEnd is \"<<temp->isEnd<<endl;\n             return temp->isEnd;\n         }\n         char c = word[index];\n         if( c == '.'){\n             for(int i=0;i<26;i++){\n                 if(searchFun(word,index+1,temp->children[i])) return true;\n             }\n         }\n         else{\n             if(searchFun(word,index+1,temp->children[c-'a'])) return true;\n         }\n         return false;\n    }\n    bool search(string word) {\n       Node *temp = root;\n       return searchFun(word,0,temp);\n        \n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"0110000000001","title_slug":"design-add-and-search-words-data-structure"}