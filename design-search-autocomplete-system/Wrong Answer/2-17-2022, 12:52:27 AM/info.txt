{"id":643065189,"lang":"cpp","time":"6 months, 1 week","timestamp":1645077147,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/643065189/","is_pending":"Not Pending","title":"Design Search Autocomplete System","memory":"N/A","code":"\nstruct Node{\n  \n    map <char ,Node*> links;\n    map <string ,int> counter;\n    \n    bool flag ;\n    \n    \n    void setEnd(){\n        flag = true;\n    }\n    \n    bool getEnd(){\n        return flag ;\n    }\n    \n    Node* get( char ch){\n        return links[ch];\n    }\n    \n    bool containsKey(char ch){\n       // cout <<ch << endl;\n        return links[ch] !=NULL;\n    }\n    void put(char ch , Node* node) {\n        links[ch] = node;\n    }\n     \n};\n\n\nclass AutocompleteSystem {\n    \nprivate :\n    \n    Node* root = new Node();\n    string prefix ;\n    \n    struct compare{\n      bool operator()(pair <int,string> &l,pair <int ,string> &r){\n          return l.first < r.first || (l.first == r.first && l.second.compare(r.second)>0);\n      }  \n    };\n    \npublic:\n    \n    void insert(string word ,int times){\n        Node* node = root ;\n        for(int i =0 ;i<word.size();i++){\n            char ch  = word[i];\n            if(!node->containsKey(ch)){\n                node->put(ch,node);\n            }\n            node = node->get(ch);\n            node->counter[word]+= times ;\n        }\n        node->setEnd();   \n    }\n    \n    \n    \n    AutocompleteSystem(vector<string>& sentences, vector<int>& times) {\n        \n        Node *node = root;\n        for(int i =0 ;i<sentences.size();i++){\n            insert(sentences[i],times[i]);\n        }\n    }\n    \n    vector<string> input(char c) {\n        if( c == '#'){\n            insert(prefix,1);\n            prefix.clear();\n            return {};\n        }\n     \n        prefix+= c;\n        \n        \n        cout <<\"prefix is \"<< prefix << endl;\n        Node* node = root ;\n        for(auto ch :prefix){\n            if(!node->containsKey(ch)){\n                return {} ;\n            }\n            node  = node->get(ch);\n        }\n        \n        \n        \n        priority_queue<pair <int ,string> ,vector <pair <int,string>>,compare > pq;\n        \n        for(auto p:node->counter){\n            \n            cout <<\"p.second and firts are \"<< p.second << \"  \"<< p.first << endl;\n            pq.push({p.second,p.first});\n        \n        }\n        vector <string> res ;\n        for(int i =0 ;i<3 && !pq.empty();i++){\n            res.push_back(pq.top().second);\n            pq.pop();\n        }\n        return res ;\n    \n    }\n};\n\n/**\n * Your AutocompleteSystem object will be instantiated and called as such:\n * AutocompleteSystem* obj = new AutocompleteSystem(sentences, times);\n * vector<string> param_1 = obj->input(c);\n */","compare_result":"0000000000000000000000000000000000000000000","title_slug":"design-search-autocomplete-system"}