{"id":734558413,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1656536242,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/734558413/","is_pending":"Not Pending","title":"Employee Free Time","memory":"9.8 MB","code":"/*\n// Definition for an Interval.\nclass Interval {\npublic:\n    int start;\n    int end;\n\n    Interval() {}\n\n    Interval(int _start, int _end) {\n        start = _start;\n        end = _end;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<Interval> employeeFreeTime(vector<vector<Interval>> s) {\n    \n        typedef pair<int, int> id_pos;\n  auto cmp = [&](const id_pos& i1, const id_pos& i2) {\n    return s[i1.first][i1.second].start > s[i2.first][i2.second].start;\n  };\n\n  std::priority_queue<id_pos, std::vector<id_pos>, decltype(cmp)> pq(cmp);\n\n  // Start by pushing the first interval for every employee\n  for (int i = 0; i < s.size(); ++i) pq.push({i, 0});\n\n  // Variable to store all free intervals\n  vector<Interval> ret;\n  \n  // End of last interval\n  int end{s[pq.top().first][pq.top().second].start};\n  while (!pq.empty()) {\n    auto [id, pos] = pq.top();\n    pq.pop();\n\n    auto& cur_interval = s[id][pos];\n    if (cur_interval.start > end)\n      ret.push_back(Interval{end, cur_interval.start});\n\n    end = max(end, cur_interval.end);\n    if(++pos < s[id].size()) pq.push({id, pos});\n\n  }\n  return ret;\n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"employee-free-time"}