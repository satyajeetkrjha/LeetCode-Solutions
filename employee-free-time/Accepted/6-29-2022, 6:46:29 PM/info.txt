{"id":734607517,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1656542789,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/734607517/","is_pending":"Not Pending","title":"Employee Free Time","memory":"9.7 MB","code":"/*\n// Definition for an Interval.\nclass Interval {\npublic:\n    int start;\n    int end;\n\n    Interval() {}\n\n    Interval(int _start, int _end) {\n        start = _start;\n        end = _end;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    vector<Interval> employeeFreeTime(vector<vector<Interval>> schedule) {\n        typedef pair <int,int> id_pos ;\n        \n        auto comp=[&](const id_pos& i1 ,const id_pos &i2 ){\n             return schedule[i1.first][i1.second].start > schedule[i2.first][i2.second].start;\n        };\n        priority_queue <id_pos ,vector <id_pos >,decltype(comp)> pq (comp);\n        int sz = schedule.size();\n        for(int i =0 ;i< sz;i++){\n            pq.push({i,0});\n        }\n        vector <Interval > res ;\n        int end{schedule[pq.top().first][pq.top().second].start};\n        while(!pq.empty()){\n            auto [id,pos] = pq.top();\n            pq.pop();\n            auto &cur_schedule = schedule[id][pos];\n            if(cur_schedule.start > end){\n                res.push_back({end,cur_schedule.start});\n            }\n            end = max(end ,cur_schedule.end);\n            if(++pos < schedule[id].size()){\n                pq.push({id,pos});\n            }   \n        }\n        return res ;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"employee-free-time"}