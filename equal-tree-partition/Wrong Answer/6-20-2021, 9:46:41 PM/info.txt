{"id":510879438,"lang":"cpp","time":"1 year, 2 months","timestamp":1624240001,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/510879438/","is_pending":"Not Pending","title":"Equal Tree Partition","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int treesum(TreeNode* root ,vector <int> &sums){\n        if(root ==NULL){\n            return 0;\n        }\n        int leftsum = treesum(root->left,sums);\n        int rightsum = treesum(root->right,sums);\n        int totalsum = leftsum+ root->val +rightsum;\n        sums.push_back(totalsum);\n        return totalsum;\n    }\n    bool checkEqualTree(TreeNode* root) {\n        vector <int> sums ;\n        int totalsum = treesum(root,sums);\n        for(int i =0;i<sums.size();i++){\n            int subtree1sum = sums[i];\n            if(subtree1sum == (totalsum -subtree1sum)){\n                return true;\n            }\n        }\n        return false ;\n        \n    }\n};","compare_result":"11100011111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"equal-tree-partition"}