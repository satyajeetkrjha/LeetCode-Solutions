{"id":510365233,"lang":"cpp","time":"1 year, 2 months","timestamp":1624150336,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/510365233/","is_pending":"Not Pending","title":"Find All The Lonely Nodes","memory":"20.2 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void dfs(TreeNode* root ,vector <int> &ans){\n        if(!root){\n            return ;\n        }\n        dfs(root->left,ans);\n        if ((root->left && !root->right) || (root->right && !root->left)){\n            if(root->left){\n                ans.push_back(root->left->val);\n            }\n            if(root->right){\n                ans.push_back(root->right->val);\n            }\n        }\n        dfs(root->right,ans);\n    }\n    vector<int> getLonelyNodes(TreeNode* root) {\n       vector <int> ans ;\n       if(!root){\n           return ans;\n       } \n        dfs(root,ans);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-the-lonely-nodes"}