{"id":375385896,"lang":"cpp","time":"2Â years","timestamp":1596455561,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/375385896/","is_pending":"Not Pending","title":"Find Bottom Left Tree Value","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int findBottomLeftValue(TreeNode* root) {\n     queue <TreeNode*> q;\n     q.push(root);\n     TreeNode* result =NULL;\n     while(!q.empty()){\n         TreeNode* cur = q.front();\n         q.pop();\n         if(cur->left){ // if current node has a left node and that left node is a leaf node\n             if(!cur->left->left && !cur->left->right){\n                 result = cur->left;\n             }\n             q.push(cur->left);\n             \n             \n         }\n         if(cur->right){\n             q.push(cur->right);\n         }\n     }\n        if(result ==NULL)\n            return root->val;\n        return result->val ;\n    }\n};","compare_result":"11111110101100011010111010100110101110101001101011111100111111001111111111","title_slug":"find-bottom-left-tree-value"}