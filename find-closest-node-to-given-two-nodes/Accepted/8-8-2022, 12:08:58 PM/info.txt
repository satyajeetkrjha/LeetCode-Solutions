{"id":768541820,"lang":"cpp","time":"2 weeks, 3 days","timestamp":1659974938,"status_display":"Accepted","runtime":"1766 ms","url":"/submissions/detail/768541820/","is_pending":"Not Pending","title":"Find Closest Node to Given Two Nodes","memory":"221.1 MB","code":"class Solution {\npublic:\n    vector<int> adj[100005];\n    int  dist1[100005];\n    int  dist2[100005];\n    map <int ,bool> visited1;\n    map <int, bool> visited2;\n    \n    void dfs1(int u,int val){\n        if(visited1[u] == true)\n            return ;\n        visited1[u] = true ;\n        dist1[u] = val;\n        for(int i =0 ;i<adj[u].size();i++){\n            int v = adj[u][i];\n            if(!visited1[v]){\n                dfs1(v,val+1);\n            }\n        }\n    }\n    \n    void dfs2(int u ,int val){\n        if(visited2[u] == true){\n            return;\n        }\n        visited2[u] = true;\n        dist2[u] = val;\n        for(int i =0 ;i<adj[u].size();i++){\n            int v = adj[u][i];\n            if(visited2[v] == false){\n                dfs2(v,val+1);\n            }\n        }\n    }\n    \n    \n    int closestMeetingNode(vector<int>& edges, int node1, int node2) {\n        \n        for(int i =0 ;i<edges.size();i++){\n            if(edges[i] == -1)\n                continue;\n            else\n            adj[i].push_back(edges[i]);\n        }\n        \n       for(int i =0 ;i<edges.size();i++){\n           dist1[i]= dist2[i] = -1;\n       }\n      \n        dfs1(node1,0);\n        dfs2(node2,0);\n        \n        \n        \n        \n\n       \n    \n        int mindist=INT_MAX;\n        map <int,vector<int>> nodes;\n        for(int i = 0 ;i<edges.size();i++){\n            if(dist1[i] == -1 || dist2[i] == -1)\n                continue;\n            else{\n                \n                int val = max(dist1[i],dist2[i]);\n                nodes[val].push_back(i);\n                mindist = min(mindist,max(dist1[i],dist2[i]));\n            }      \n        }\n        \n        \n        if(mindist == INT_MAX)\n            return -1;\n        return nodes[mindist][0] ;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-closest-node-to-given-two-nodes"}