{"id":516617532,"lang":"cpp","time":"1 year, 1 month","timestamp":1625290792,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/516617532/","is_pending":"Not Pending","title":"Find Distance in a Binary Tree","memory":"31.7 MB","code":"\nclass Solution {\npublic:\n    \n    TreeNode* lca(TreeNode *root ,int p ,int q){\n        if(root ==NULL)\n            return NULL;\n        if(root-> val == p || root-> val == q){\n            return root;\n        }\n        TreeNode *left = lca(root->left,p,q);\n        TreeNode *right = lca(root->right,p,q);\n        if(left && right)\n            return root;\n        return left ? left:right;\n\n    }\n    int findDistance(TreeNode* root, int p, int q) {\n        // find the lca and do bfs from the lca node and use depth concept to solve\n        TreeNode* lcanode = lca(root,p,q);\n        int dp= -1; // depth to node p\n        int dq= -1; // depth to node q\n        int d =0;\n        queue <TreeNode*> qu;\n        qu.push(lcanode);\n        cout<<\"lca is \"<<lcanode->val<<endl;\n        while(!qu.empty() && (dp == -1 || dq == -1)){\n            int sz = qu.size();\n            cout<<\"sz is \"<<sz<<endl;\n            for(int i =0;i<sz;i++){\n                TreeNode * cur = qu.front();\n                qu.pop();\n                cout<<\"cur val is \"<<cur->val<<endl;\n                if(cur->val == p) dp =d;\n                if(cur->val == q) dq =d;\n                if(cur->left) qu.push(cur->left);\n                if(cur->right) qu.push(cur->right);\n            }\n            d++;\n            \n        }\n        return dp+dq;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"find-distance-in-a-binary-tree"}