{"id":623848221,"lang":"cpp","time":"7 months, 1 week","timestamp":1642669418,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/623848221/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"43.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    string dfs(TreeNode* root ,map <string ,int> &m ,vector <TreeNode*>&res){\n        if(!root)\n            return \"\" ;\n        string s =to_string(root->val)+\",\"+dfs(root->left,m,res)+\",\"+dfs(root->right,m,res);\n     //   cout <<\"string s before updating map is \"<< s << endl;\n        if(m[s]++ ==1){\n            res.push_back(root);\n        }\n       // cout <<\"Before return string s is \"<< s << endl;\n        return s ;\n        \n    }\n    \n    \n    vector<TreeNode*> findDuplicateSubtrees(TreeNode* root) {\n        map <string ,int> m ;\n        vector<TreeNode*> res ;\n        dfs(root,m,res);\n        return res ;\n    }\n    \n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees"}