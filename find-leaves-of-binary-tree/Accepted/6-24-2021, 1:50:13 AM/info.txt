{"id":512414131,"lang":"cpp","time":"1 year, 2 months","timestamp":1624513813,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/512414131/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"8.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int dfs(TreeNode* root, map <int ,vector <int>>&m){\n        if(root ==NULL){\n            return 0;\n        }\n        int leftheight = dfs(root->left,m);\n        int rightheight = dfs(root->right,m);\n        int height = max(leftheight,rightheight)+1;\n        m[height].push_back(root->val);\n        return height;\n    }\n    vector<vector<int>> findLeaves(TreeNode* root) {\n       map <int ,vector <int> > m;\n       vector <vector <int> > res;\n        dfs(root,m);\n        map <int ,vector <int> > ::iterator it ;\n        for(it = m.begin();it!=m.end();it++){\n            res.push_back(it->second);\n        }\n        return res;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree"}