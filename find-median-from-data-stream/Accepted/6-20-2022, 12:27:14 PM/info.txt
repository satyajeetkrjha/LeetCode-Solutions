{"id":726862950,"lang":"cpp","time":"2Â months","timestamp":1655742434,"status_display":"Accepted","runtime":"697 ms","url":"/submissions/detail/726862950/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"117 MB","code":"class MedianFinder {\npublic:\n    \n    priority_queue <int> low ; // max heap for lower half \n    priority_queue < int ,vector <int> ,greater <int> >high ; // this is for upper half    \n    \n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        if(low.size() == 0 || low.top() > num){\n            low.push(num);\n        }\n        else{\n            high.push(num);\n        }\n        \n        if(low.size() > high.size()+1){\n            high.push(low.top());\n            low.pop();\n        }\n        else if(high.size() > low.size()+1){\n            low.push(high.top());\n            high.pop();\n        }\n    \n    }\n    \n    double findMedian() {\n         if (low.size() > high.size()){\n             return low.top();\n         }        \n         else if(high.size()>low.size()){\n             return high.top();\n         }\n         return (low.top()+high.top())*0.5;\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream"}