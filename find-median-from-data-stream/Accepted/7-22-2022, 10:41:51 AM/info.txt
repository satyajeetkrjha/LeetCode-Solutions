{"id":753790049,"lang":"cpp","time":"1Â month","timestamp":1658500911,"status_display":"Accepted","runtime":"519 ms","url":"/submissions/detail/753790049/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"117 MB","code":"class MedianFinder {\npublic:\n    priority_queue <int> low ;\n    priority_queue <int ,vector<int> ,greater <int> > high;\n    MedianFinder() {\n        \n    }\n    \n    void addNum(int num) {\n        if(low.size() == 0 || low.top()>num)\n            low.push(num);\n        else\n            high.push(num);\n        \n        if(low.size() > high.size()+1){\n            high.push(low.top());\n            low.pop();\n        }\n        else if (high.size()> low.size()+1){\n            low.push(high.top());\n            high.pop();\n        }\n    }\n    \n    double findMedian() {\n        if(low.size() > high.size())\n            return low.top();\n        else if(high.size() > low.size())\n            return high.top();\n        double ans = (low.top()+high.top())*0.5;\n        return ans ;\n    }\n};\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder* obj = new MedianFinder();\n * obj->addNum(num);\n * double param_2 = obj->findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream"}