{"id":505639297,"lang":"cpp","time":"1 year, 2 months","timestamp":1623278574,"status_display":"Accepted","runtime":"264 ms","url":"/submissions/detail/505639297/","is_pending":"Not Pending","title":"Find Nearest Right Node in Binary Tree","memory":"86.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* findNearestRightNode(TreeNode* root, TreeNode* target) {\n        queue <TreeNode*> q;\n        q.push(root);\n        while(!q.empty()){\n            int sz = q.size(); // size of the level we are at \n            for(int i=0;i<sz;i++){\n                TreeNode* cur =q .front();\n                q.pop();\n                if( cur == target){\n                    // if current node is the last node at a level in bfs it means there is no node at it's right so return null \n                    if( i == sz-1){\n                        return NULL;\n                    }\n                    else \n                        return q.front();\n                }\n                if(cur->left)\n                    q.push(cur->left);\n                if(cur->right)\n                    q.push(cur->right);\n            }\n        }\n        return NULL;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-nearest-right-node-in-binary-tree"}