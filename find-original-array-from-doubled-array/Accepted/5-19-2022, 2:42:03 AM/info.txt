{"id":702602144,"lang":"cpp","time":"3 months, 1 week","timestamp":1652942523,"status_display":"Accepted","runtime":"792 ms","url":"/submissions/detail/702602144/","is_pending":"Not Pending","title":"Find Original Array From Doubled Array","memory":"144.1 MB","code":"class Solution {\npublic:\n    map <int ,int> m;\n    vector<int> findOriginalArray(vector<int>& changed) {\n        \n        vector <int> res ;\n        \n        if(changed.size() % 2==1){\n            return {} ;\n        }\n        for(int i =0 ;i< changed.size();i++){\n            m[changed[i]]++;\n        }\n        \n        sort(changed.begin(),changed.end());\n        \n        for(int i =0 ;i< changed.size();i++){\n            int num = changed[i];\n            int twice = num*2 ;\n            \n            /*\n             We reduced the frequency of num anf frequency of\n              2*num in the array .Since we already reduced frequency of double so if we encountee it's doubale again then it's frequemcy is already reduced to zero for m[num] == 0 ,we don't do anything and this is a crucial step .\n        \n            */\n            \n            \n            if(m[num] == 0) continue ;\n            \n            if(m[twice] == 0){\n                return {} ;\n            }\n            m[twice]--;\n            m[num] --;\n            res.push_back(num);\n        }\n        return res ;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-original-array-from-doubled-array"}