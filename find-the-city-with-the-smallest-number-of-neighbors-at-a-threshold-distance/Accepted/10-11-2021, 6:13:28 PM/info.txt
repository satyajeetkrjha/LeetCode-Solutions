{"id":569658853,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1633990408,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/569658853/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"16 MB","code":"typedef pair <int,int> pr;\nint threshold;\nint dist[100005];\nint seen[100005];\nclass Solution {\npublic:\n    int dijkistra(vector<vector<pair<int, int>>>& graph,int start,int nodes){\n       // cout<<\"nodes \"<<nodes <<endl;\n       priority_queue<pr ,vector <pr>,greater<pr>> pq;\n        \n        \n       pq.push({0,start}); // weight and node\n       for(int i =0 ;i<=nodes ;i++){\n           dist[i] =INT_MAX;\n           seen[i]= 0;\n       }\n       dist[start] =0 ;\n       while(!pq.empty()){\n           pr curr = pq.top();\n           pq.pop();\n           int w = curr.first ; // weight\n           int u = curr.second; // node\n           \n            for(auto& nei :graph[u]){\n                int v = nei.first ;\n                int d = nei.second;\n               // cout<<\"v are \"<<v <<endl;\n                int cost = d+w;\n                if(dist[v]> cost){\n                    dist[v] = cost;\n                    pq.push({dist[v],v});\n                }\n            } \n       }\n        /*\n        cout <<\"calculating distance \"<<endl;\n        for(int i =0 ;i<nodes ;i++){\n            cout<<\"dist[i] \"<< dist[i]<< \" \";\n        }\n        cout<<endl;*/\n        int count =0 ;\n        for(int u =0 ;u <nodes ;u++){\n            if( u == start){\n                continue;\n            }\n            if(dist[u]<= threshold){\n                count ++;\n            }\n        }\n        //cout <<\"count is \"<<count <<endl;\n        return count ;\n       \n    }\n    \n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n       vector<vector<pair<int, int>>>graph;\n        graph.resize(n);\n        threshold = distanceThreshold;\n        for(int i =0 ;i<edges.size();i++){\n            int u = edges[i][0];int v = edges[i][1];int w = edges[i][2];\n           // cout <<\"u v and w are \"<< u << \" \"<< v<< \" \"<<w <<endl;\n            graph[u].push_back({v,w});\n            graph[v].push_back({u,w});\n        }\n        \n        /*\n        cout<<\"Printing graph \"<<endl;\n        for (int u = 0;u <n;u++) {\n\t\tfor (auto it : graph[u]) {\n\t\t\tint v = it.first;\n\t\t\tint w = it.second;\n\t\t\t//cout << \" u is \" << u << \" v is \" << v << \" and w is \" << w << endl;\n\t\t}\n\t  }\n\tcout<< \"---------\"<<endl;\n    */\n\n        \n        \n        int neighbours =INT_MAX;\n        int nodeVal = -1;\n        for(int i =0 ;i<n;i++){\n           int totalneighbours = dijkistra(graph,i,n);\n           cout <<\"totalneighbours ..\"<<totalneighbours <<endl;\n            cout<<\"nodeval is \"<<nodeVal <<endl;\n            if(totalneighbours <=neighbours){\n                neighbours = totalneighbours ;\n                nodeVal = i;\n            }\n        }\n        return nodeVal;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance"}