{"id":533543079,"lang":"cpp","time":"1Â year","timestamp":1628139541,"status_display":"Accepted","runtime":"1564 ms","url":"/submissions/detail/533543079/","is_pending":"Not Pending","title":"Frog Jump","memory":"455.8 MB","code":"class Solution {\npublic:\n    map <int, set <int>> m;\n    bool canCross(vector<int>& stones) {\n        for(int i=0 ;i<stones.size();i++){ \n            set<int> s;\n            m[stones[i]] =s;\n        }\n        \n        set <int> x;\n        x.insert(1);\n        m[stones[0]]=x;\n        \n\n        \n        for(int i =0 ;i<stones.size();i++){\n            int current = stones[i];\n            set<int> possiblejumps = m[current];\n            \n            for(auto jump :possiblejumps){\n                \n                 int newpos = current + jump ;\n                // cout<<\"newpos is \"<<newpos<<endl;\n                if(newpos == stones[stones.size()-1]){\n                    return true;\n                }\n                \n                // this newpos is in the map now\n                if(m.find(newpos)!=m.end()){\n                   set <int> temp = m[newpos];\n                   if(jump-1 >0){\n                       temp.insert(jump-1);\n                   }\n                    temp.insert(jump+1);\n                    temp.insert(jump);\n                    m[newpos] =temp;\n                } \n            } \n        }\n            \n        return false;\n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"frog-jump"}