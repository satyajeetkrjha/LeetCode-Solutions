{"id":721252148,"lang":"cpp","time":"2 months, 1 week","timestamp":1655128015,"status_display":"Accepted","runtime":"144 ms","url":"/submissions/detail/721252148/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"15.8 MB","code":"class Solution {\npublic:\n    vector <int> visited;\n    vector <int> adj[100005];\n    \n    bool flag = false;\n    void dfs(int u ,int parent){\n        if(!visited[u])\n            visited[u] =1 ;\n        for(int i=0 ;i< adj[u].size();i++){\n            int v = adj[u][i];\n            if(!visited[v]){\n                dfs(v,u); \n            }\n            else if( visited[v] && v!=parent){\n                flag = true;\n                return;\n            }\n        }\n    }\n    \n    \n    \n    \n    bool validTree(int n, vector<vector<int>>& edges) {\n       visited.resize(n,0);\n       for(int i =0 ;i< edges.size();i++){\n           int u = edges[i][0];int v = edges[i][1];\n           adj[u].push_back(v);\n           adj[v].push_back(u);\n       }\n       dfs(0,-1) ;// start a dfs with node 0 and set it's parent to be 1\n       for(int i =0 ;i< n;i++){\n           if(!visited[i])\n               return false;\n       } \n       \n       return !flag ? true :false;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111","title_slug":"graph-valid-tree"}