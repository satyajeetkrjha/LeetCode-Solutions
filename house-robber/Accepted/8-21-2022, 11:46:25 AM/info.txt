{"id":779533100,"lang":"cpp","time":"4 days, 9 hours","timestamp":1661096785,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/779533100/","is_pending":"Not Pending","title":"House Robber","memory":"8 MB","code":"class Solution {\npublic:\n    int rob(vector<int>& val) {\n        /*\n        define DP(i, bool taken) as maximum sum you can get from first i if status of i is taken (true/false)\nthen clearly DP(0,0) = 0 and DP(0,1) = val[1]\nfor i > 1, DP(i, 0) = max(DP(i-1,0), DP(i-1,1)) because if you don't take i there is no constraint on whether you take i-1\nand DP(i,1) = DP(i-1,0) + val[i] because you cannot take i-1\n        \n        \n        \n        */\n          int n = val.size();\n        vector<vector<int>> DP(n, vector<int>(2));\nDP[0][1] = val[0];\nfor(int i=1; i<n; ++i) {\n  DP[i][0] = max(DP[i-1][0], DP[i-1][1]);\n  DP[i][1] = DP[i-1][0] + val[i];\n}\nreturn max(DP[n-1][0], DP[n-1][1]);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber"}