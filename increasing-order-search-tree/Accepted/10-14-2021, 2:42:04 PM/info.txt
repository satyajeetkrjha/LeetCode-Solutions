{"id":571246551,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1634236924,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/571246551/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root ,vector <TreeNode*>&v){\n        if(root ==NULL)\n            return ;\n        inorder(root->left,v);\n        v.push_back(root);\n        inorder(root->right,v);\n        \n    }\n    \n    \n    TreeNode* increasingBST(TreeNode* root) {\n        \n        vector <TreeNode*> vec;\n        inorder(root ,vec);\n        \n        \n        for(int i =0 ;i<vec.size()-1 ;i++){\n            vec[i]->left =NULL;\n            vec[i]->right = vec[i+1];\n        }\n        \n        vec[vec.size()-1]->left =NULL;\n        vec[vec.size()-1]->right =NULL;\n        \n        return vec[0];\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"increasing-order-search-tree"}