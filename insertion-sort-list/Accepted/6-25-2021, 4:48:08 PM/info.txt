{"id":513161825,"lang":"cpp","time":"1 year, 2 months","timestamp":1624654088,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/513161825/","is_pending":"Not Pending","title":"Insertion Sort List","memory":"9.5 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* insertionSortList(ListNode* head) {\n        ListNode* dummy = new ListNode();\n        ListNode* prev = dummy ;\n        ListNode* cur = head ;\n        ListNode* next;\n        \n        while(cur!=NULL){\n            next = cur->next ;\n            while(prev->next!=NULL && prev->next->val <cur->val){\n                prev = prev->next;\n            }\n           \n            cur->next = prev->next;\n            if(cur->next)\n            cout<<\"cur->next val is \"<<cur->next->val <<endl;\n            else \n                cout<<\"cur->next val is NULL\"<<endl;\n            \n            prev->next = cur;\n            \n            prev = dummy ;\n            cur = next;\n        }\n        return dummy->next ;\n    }\n};","compare_result":"1111111111111111111","title_slug":"insertion-sort-list"}