{"id":367120079,"lang":"cpp","time":"2 years, 1 month","timestamp":1594848539,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/367120079/","is_pending":"Not Pending","title":"Intersection of Two Linked Lists","memory":"14.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n   \n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        int lena=0;int lenb=0;\n        \n        ListNode* tempa=headA;\n        ListNode* tempb=headB;\n        \n        while(tempa!=NULL){\n            lena++;\n            tempa= tempa->next;\n        }\n        while(tempb!=NULL){\n            lenb++;\n            tempb=tempb->next;\n            \n        }\n        cout<<\"l1 and l2 are\"<<lena<<\" \"<<lenb<<endl;\n        int diff =0;\n        \n        if(lena >lenb){\n            diff =lena-lenb;\n            tempa=headA;\n            tempb=headB;\n        }\n        else{\n            diff =lenb-lena;\n            tempa=headB;\n            tempb=headA;\n        }\n        cout<<\"diff is \"<<diff<<endl;\n        \n        while(diff>0){\n            tempa = tempa->next;\n            diff --;\n        }\n     \n        while(tempa !=tempb){\n            tempa = tempa->next;\n            tempb= tempb->next;\n        }\n        return tempa;\n        \n        \n       \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"intersection-of-two-linked-lists"}