{"id":350727729,"lang":"cpp","time":"2 years, 2 months","timestamp":1591617900,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/350727729/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"8.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void  invert(TreeNode* root){\n        if(root == NULL) //base case\n            return;\n        invert(root->left);//make a call to left\n        invert(root->right);// call to right\n        // now do the processing \n        TreeNode* temp =root->left;\n        root->left=root->right;\n        root->right=temp;\n    }\n    TreeNode* invertTree(TreeNode* root) {\n        invert(root);\n        return root;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"invert-binary-tree"}