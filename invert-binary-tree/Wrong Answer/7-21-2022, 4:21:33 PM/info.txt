{"id":753200347,"lang":"cpp","time":"1Â month","timestamp":1658434893,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/753200347/","is_pending":"Not Pending","title":"Invert Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* invertTree(TreeNode* root) {\n        \n        if(!root)\n            return NULL ;\n        queue <TreeNode*> q ;\n        q.push(root);\n        \n        while(!q.empty()){\n            int sz = q.size();\n            for(int i =0 ;i< sz;i++){\n                auto cur = q.front();\n                q.pop();\n                if(cur->right && cur->left){\n                     auto temp = cur->right ;\n                     cur->right = cur->left ;\n                     cur->left = temp;\n                }\n                \n                if(cur->left)\n                    q.push(cur->left);\n                if(cur->right)\n                    q.push(cur->right);\n            }\n        }\n        return root ;\n        \n    }\n};","compare_result":"11110001000000000000000000000000010000001000000000000000000000000000000100000","title_slug":"invert-binary-tree"}