{"id":381681692,"lang":"cpp","time":"2Â years","timestamp":1597574628,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/381681692/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"35 MB","code":"class Solution {\npublic:\n    int minEatingSpeed(vector<int>& piles, int H) {\n        int low =1;\n        int high =INT_MIN ;\n        for(int i=0;i<piles.size();i++){\n            high = max(piles[i],high);\n        }\n        // high can be the maximum speed of eating bananas \n        //  low <=eating speeed <= high this is what eating speed can be\n        int speed ;\n        while(low <=high){\n            int mid = (low+high)/2;\n            int timeTaken = timetoeat(mid,piles);\n            if(timeTaken ==H){\n                // ith this speed of mid all bananas can be finished so we got answer\n             return mid;\n            }\n            else if (timeTaken >H){ // we need bigger numbers in denomintor \n                low = mid+1;\n            }\n            else {\n                high = mid -1;\n            }\n        }\n        return low;\n        \n    }\n    int timetoeat(int speed , vector <int> piles){\n        int time =0;\n        for(int i =0;i<piles.size();i++){\n            time +=ceil(piles[i]/(double)speed);\n        }\n        return time ;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas"}