{"id":381679353,"lang":"cpp","time":"2Â years","timestamp":1597574024,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/381679353/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"N/A","code":"class Solution {\npublic:\n    int minEatingSpeed(vector<int>& piles, int H) {\n        int low =1;\n        int high ;\n        for(int i=0;i<piles.length();i++){\n            high = max(piles[i],high);\n        }\n        // high can be the maximum speed of eating bananas \n        //  low <=eating speeed <= high this is what eating speed can be\n        int speed ;\n        while(low <=high){\n            int mid = (low+high)/2;\n            int timeTaken = timetoeat(mid,piles);\n            if(timeTaken ==H){\n                // ith this speed of mid all bananas can be finished so we got answer\n             speed = mid;\n            }\n            else if (timeTaken <H){\n                low = mid+1;\n            }\n            else {\n                high = mid -1;\n            }\n        }\n        return speed ;\n    }\n    int timetoeat(int speed , vector <int> & piles){\n        int time =0;\n        for(int i =0;i<piles.size();i++){\n            time +=ceil(piles[i]/speed);\n        }\n        return time ;\n    }\n};","compare_result":null,"title_slug":"koko-eating-bananas"}