{"id":531295590,"lang":"cpp","time":"1Â year","timestamp":1627775960,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/531295590/","is_pending":"Not Pending","title":"Kth Largest Element in a Stream","memory":"19.9 MB","code":"class KthLargest {\npublic:\n    \n    // Just maintain a min heap of size k all the time .When you do this ,the element at the\n    // top in a min heap is the smallest amomg all k that we have in heap so our kth largest is nothing but the top of min heap \n    \n    \n    int sizeofheap ;\n    priority_queue <int ,vector <int> ,greater <int> > pq;\n    KthLargest(int k, vector<int>& nums) {\n        sizeofheap = k;\n       for(int i =0 ;i<nums.size();i++){\n           pq.push(nums[i]);\n           if(pq.size() >k){\n               pq.pop();\n           }\n       }    \n    }\n    \n    int add(int val) {\n        pq.push(val);\n        if(pq.size()>sizeofheap){\n            pq.pop();\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */","compare_result":"1111111111","title_slug":"kth-largest-element-in-a-stream"}