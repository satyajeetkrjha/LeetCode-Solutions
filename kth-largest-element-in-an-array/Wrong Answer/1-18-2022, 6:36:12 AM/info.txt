{"id":622457458,"lang":"cpp","time":"7 months, 1 week","timestamp":1642505772,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/622457458/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"N/A","code":"class Solution {\npublic:\n    vector <int> vec;\n    \n    int partition(int left ,int right ,int pivot_index){\n        int pivot = vec[pivot_index];\n        swap(vec[pivot_index],vec[right]);\n        int store_index = left ;\n        for(int i = left ;i<= right ;i++){\n            if(vec[i]< pivot){\n                swap(store_index,i);\n                store_index++;\n            }\n        }\n        swap(store_index,right);\n        return store_index;\n        \n    }\n    \n    int quickselect(int left ,int right ,int kthsmallest){\n        if(left == right){\n            return vec[left];\n        }\n        int randpivot=rand()%(right-left)+(left+1); // make the pivot random\n        int pivot_index = partition(left ,right ,randpivot);\n        if(kthsmallest == pivot_index){\n            return vec[kthsmallest];\n        }\n        else if(kthsmallest < pivot_index){\n            return quickselect(left ,pivot_index-1,kthsmallest);\n        }\n        return quickselect(pivot_index+1,right,kthsmallest);\n       \n        \n    }\n    \n    \n    int findKthLargest(vector<int>& nums, int k) {\n       vec= nums ;\n       int n = nums.size();\n       return quickselect(0,n-1,n-k); \n        \n    }\n};","compare_result":"10100111010000000110110100001000","title_slug":"kth-largest-element-in-an-array"}