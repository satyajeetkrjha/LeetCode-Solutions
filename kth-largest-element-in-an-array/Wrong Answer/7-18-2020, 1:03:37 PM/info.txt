{"id":368312176,"lang":"cpp","time":"2 years, 1 month","timestamp":1595091817,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/368312176/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"N/A","code":"class Solution {\npublic:\n   int partition(vector<int>& nums, int left, int right) {\n        int pivot = nums[left], l = left + 1, r = right;\n        while (l <= r) {\n            if (nums[l] < pivot && nums[r] > pivot) {\n                swap(nums[l++], nums[r--]);\n            }\n            if (nums[l] >= pivot) {\n                l++;\n            }\n            if (nums[r] <= pivot) {\n                r--;\n            }\n        }\n        swap(nums[left], nums[r]);\n        return r;\n    }\n    void printvector(vector <int> &nums){\n        for(int i=0;i<nums.size();i++){\n            cout<<nums[i]<<\" \";\n        }\n        cout<<endl;\n    }\n    int findKthLargest(vector<int>& nums, int k) {\n        int low =0;\n        int high = nums.size()-1;\n        int ans ;\n        int pivotindex;\n        while(low <high){\n            cout<<\"low is\"<<low<<endl;\n            cout<<\"high is \"<<high<<endl;\n            cout<<\"pivot to be found is element \"<<nums[high]<<endl;\n             pivotindex =partition(nums,low,high);\n            printvector(nums);\n            cout<<\"pivotindex is\"<<pivotindex<<endl;\n            \n             \n             if(pivotindex < k) {\n                low = pivotindex + 1;\n            } else if (pivotindex > k) {\n                high = pivotindex - 1;\n            } else {\n                break;\n            }\n        }\n        return nums[pivotindex];\n        \n    }\n};","compare_result":"11110110010000000110111000101000","title_slug":"kth-largest-element-in-an-array"}