{"id":554418944,"lang":"cpp","time":"11 months, 2 weeks","timestamp":1631568638,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/554418944/","is_pending":"Not Pending","title":"Kth Missing Positive Number","memory":"9.6 MB","code":"class Solution {\npublic:\n    \n    //O(N)\n    int findKthPositive(vector<int>& arr, int k) {\n        /*\n        Let us suppose that we have to find the 3rd missing positive integer and the first element in arr is 9 now in this case we see that k is less than (9-1) i.e k lies before our first positive number in the arr     \n         */   \n        if(k <= arr[0]-1){\n            return k;\n        }\n        /*\n          let us suppose that we need to find the 15 th missing positive numbers so \n          (15-(9-1)) i.e we already had 7 positive numbersv before arr[0] so decrease k by 8\n        \n        */\n     \n        k = k- (arr[0]-1); \n        // u do 5-(2-1) i.e 5-1 and not 5-2-1 =3-1 =2 \n       // cout<<\"k here is \"<<k <<endl;\n        int n = arr.size();\n        for(int i =0 ;i<n-1;i++){\n            /* this gives us the missing numbers between arr[i] and arr[i+1]\n            so if currMissing is 10 and you have k left as say 6 now then \n            just do arr[i]+6 because arr[i]+6 will lie between arr[i] and arr[i+1] \n            */\n            int currMissing = arr[i+1]- arr[i]-1;\n            //cout <<\"k is \"<<k<<endl;\n            //cout<<\"currMissing is \"<<currMissing <<endl;\n            //cout<<\" a[i] is \"<<arr[i]<<endl;\n            if(k <=currMissing){\n                return arr[i]+k;\n            }\n            \n                k = k- currMissing;\n        }\n        //last case\n        return arr[n-1]+k;    \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-missing-positive-number"}