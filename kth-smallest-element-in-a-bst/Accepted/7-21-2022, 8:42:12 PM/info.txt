{"id":753318652,"lang":"cpp","time":"1Â month","timestamp":1658450532,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/753318652/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"24.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int kthSmallest(TreeNode* root, int k) {\n        vector <int> vec ;\n        stack <TreeNode*> st ;\n        TreeNode* cur = root ;\n        while(cur!=NULL || !st.empty()){\n            while(cur!=NULL){\n                st.push(cur);\n                cur = cur->left;\n            } \n            cur = st.top();\n            st.pop();\n            vec.push_back(cur->val);\n            cur = cur->right ;\n        }\n        for(auto &it:vec){\n            cout << it << \" \";\n        }\n        cout << endl;\n        return vec[k-1];\n        \n        \n        \n        \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst"}