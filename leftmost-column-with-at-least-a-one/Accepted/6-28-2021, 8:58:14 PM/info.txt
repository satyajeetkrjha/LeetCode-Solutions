{"id":514648945,"lang":"cpp","time":"1 year, 1 month","timestamp":1624928294,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/514648945/","is_pending":"Not Pending","title":"Leftmost Column with at Least a One","memory":"8.2 MB","code":"/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * class BinaryMatrix {\n *   public:\n *     int get(int row, int col);\n *     vector<int> dimensions();\n * };\n */\n\nclass Solution {\npublic:\n    int leftMostColumnWithOne(BinaryMatrix &binaryMatrix) {\n      vector <int> dimension = binaryMatrix.dimensions();\n      int row = dimension[0];\n      int column = dimension[1];\n        cout<<\"row and column \"<<row << \" \"<<column <<endl;\n      int smallestindex = column;\n      for(int i  =0;i<row;i++){\n          int low =0;\n          int high = column-1;\n          while(low <high){\n              int mid =(low+high)/2;\n              if(binaryMatrix.get(i,mid) == 0){\n                  low =mid+1;\n              }\n              else {\n                  high = mid;\n              }\n          }\n          cout<<\"low is \"<<low<<endl;\n          cout<<\"high is \"<<high<<endl;\n          if(binaryMatrix.get(i,low) == 1){\n              smallestindex = min(smallestindex ,low);\n          }\n      }\n        if(smallestindex == column){\n            return -1;\n        }\n        return smallestindex ;\n    }\n};","compare_result":"1111111111111111111111111111111111111","title_slug":"leftmost-column-with-at-least-a-one"}