{"id":733132097,"lang":"cpp","time":"1 month, 4 weeks","timestamp":1656391357,"status_display":"Accepted","runtime":"946 ms","url":"/submissions/detail/733132097/","is_pending":"Not Pending","title":"LFU Cache","memory":"205.6 MB","code":"struct Node {\n    int key, value, cnt;\n    Node *next; \n    Node *prev;\n    Node(int _key, int _value) {\n        key = _key;\n        value = _value; \n        cnt = 1; \n    }\n}; \nstruct List {\n    int size; \n    Node *head; \n    Node *tail; \n    List() {\n        head = new Node(0, 0); \n        tail = new Node(0,0); \n        head->next = tail;\n        tail->prev = head; \n        size = 0;\n    }\n    \n    void addFront(Node *node) {\n        Node* temp = head->next;\n        node->next = temp;\n        node->prev = head;\n        head->next = node;\n        temp->prev = node;\n        size++; \n    }\n    \n    void removeNode(Node* delnode) {\n        Node* delprev = delnode->prev;\n        Node* delnext = delnode->next;\n        delprev->next = delnext;\n        delnext->prev = delprev;\n        size--; \n    }\n    \n    \n    \n};\nclass LFUCache {\n    map<int, Node*> keyNode; \n    map<int, List*> freqListMap; \n    int maxSizeCache;\n    int minFreq; \n    int curSize; \npublic:\n    LFUCache(int capacity) {\n        maxSizeCache = capacity; \n        minFreq = 0;\n        curSize = 0; \n    }\n    void updateFreqListMap(Node *node) {\n        keyNode.erase(node->key); \n        freqListMap[node->cnt]->removeNode(node); \n        if(node->cnt == minFreq && freqListMap[node->cnt]->size == 0) {\n            minFreq++; \n        }\n        \n        List* nextHigherFreqList = new List();\n        if(freqListMap.find(node->cnt + 1) != freqListMap.end()) {\n            nextHigherFreqList = freqListMap[node->cnt + 1];\n        } \n        node->cnt += 1; \n        nextHigherFreqList->addFront(node); \n        freqListMap[node->cnt] = nextHigherFreqList; \n        keyNode[node->key] = node;\n    }\n    \n    int get(int key) {\n        if(keyNode.find(key) != keyNode.end()) {\n            Node* node = keyNode[key]; \n            int val = node->value; \n            updateFreqListMap(node); \n            return val; \n        }\n        return -1; \n    }\n    \n    void put(int key, int value) {\n        if (maxSizeCache == 0) {\n            return;\n        }\n        if(keyNode.find(key) != keyNode.end()) {\n            Node* node = keyNode[key]; \n            node->value = value; \n            updateFreqListMap(node); \n        }\n        else {\n            if(curSize == maxSizeCache) {\n                List* list = freqListMap[minFreq]; \n                keyNode.erase(list->tail->prev->key); \n                freqListMap[minFreq]->removeNode(list->tail->prev);\n                curSize--; \n            }\n            curSize++; \n            // new value has to be added who is not there previously \n            minFreq = 1; \n            List* listFreq = new List(); \n            if(freqListMap.find(minFreq) != freqListMap.end()) {\n                listFreq = freqListMap[minFreq]; \n            }\n            Node* node = new Node(key, value); \n            listFreq->addFront(node);\n            keyNode[key] = node; \n            freqListMap[minFreq] = listFreq; \n        }\n    }\n};\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache* obj = new LFUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"11111111111111111111111111","title_slug":"lfu-cache"}