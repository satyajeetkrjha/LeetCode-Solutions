{"id":366191791,"lang":"cpp","time":"2 years, 1 month","timestamp":1594673851,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/366191791/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode* slow = head;\n        ListNode* fast = head;\n        if(head == NULL || head->next ==NULL)\n            return NULL;\n        bool flag =false;\n        while(slow !=NULL && fast!=NULL && fast->next!=NULL && fast->next->next!=NULL){\n            slow =slow->next;\n            fast=fast->next->next;\n            if(slow == fast){\n                flag =true;\n                break;\n            }\n        }\n        if(!flag){\n            return NULL;\n        }\n        slow =head;\n        while(slow !=fast){\n            slow =slow->next;\n            fast=fast->next;\n        }\n        return slow ;\n    }\n};","compare_result":"1111111111111111","title_slug":"linked-list-cycle-ii"}