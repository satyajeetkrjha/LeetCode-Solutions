{"id":509804720,"lang":"cpp","time":"1 year, 2 months","timestamp":1624039593,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/509804720/","is_pending":"Not Pending","title":"Lonely Pixel I","memory":"16.6 MB","code":"class Solution {\n    \npublic:\n    \n    \n    int findLonelyPixel(vector<vector<char>>& picture) {\n        //count number of Bs in each row and column\n     //then do another sweep and every time you see a B, check if its row and column counts are 1\n        int R= picture.size();\n        int C = picture[0].size();\n       vector <int> cnt1(R+1);\n        vector <int> cnt2(C+1);\n        for(int i=0;i<R;i++){\n            for(int j=0;j<C;j++){\n                if(picture[i][j] =='B'){\n                    ++cnt1[i];\n                    ++cnt2[j];\n                }\n            }\n        }\n        for(int i =0 ;i<R;i++){\n            cout<<cnt1[i]<<\" \";\n        }\n        cout<<endl;\n        for(int j=0;j<C;j++){\n            cout<<cnt2[j]<<\" \";\n        }\n        cout<<endl;\n        int ans =0;\n        for(int i=0;i<R;i++){\n            for(int j =0;j<C;j++){\n                if(picture[i][j] == 'B' && cnt1[i] == 1 && cnt2[j] ==1){\n                    ans++;\n                }\n            }\n        }\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"lonely-pixel-i"}