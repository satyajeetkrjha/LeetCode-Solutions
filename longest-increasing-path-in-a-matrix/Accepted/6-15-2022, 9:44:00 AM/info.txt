{"id":722881051,"lang":"cpp","time":"2 months, 1 week","timestamp":1655300640,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/722881051/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"15 MB","code":"class Solution {\npublic:\n    \n    int dx [4] ={1,-1,0,0};\n    int dy [4] ={0,0,-1,1};\n    int cache[205][205];\n    \n    \n    int dfs(vector<vector<int>>& matrix,int r ,int c){\n        if(cache[r][c]>0)\n            return cache[r][c];\n        for(int i =0 ;i< 4 ;i++){\n            int nr = r + dx[i];\n            int nc = c+ dy[i];\n            if(nr>=0 && nc>=0 && nr <matrix.size() && nc <matrix[0].size()\n              && matrix[nr][nc]>matrix[r][c]){\n                cache[r][c] = max(cache[r][c],dfs(matrix,nr,nc));\n            }\n        }\n        \n       return  ++cache[r][c];\n        \n    }\n    \n    \n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        int n = matrix.size() ;\n        int m = matrix[0].size();\n        \n        memset(cache ,0,sizeof(cache));\n        \n        int ans =0;\n        \n        for(int i =0 ;i< n;i++){\n            for(int j =0 ;j<m;j++){\n                ans = max(ans,dfs(matrix,i,j));\n            }\n        }\n        \n       return ans ;\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}