{"id":759305740,"lang":"cpp","time":"4Â weeks","timestamp":1659037017,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/759305740/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"15.1 MB","code":"class Solution {\npublic:\n    int cache[300][300];\n    int dx[4]={1 ,-1,0,0};\n    int dy[4] = {0,0,-1,1};\n    int dfs(vector<vector<int>>& matrix,int r,int c){\n        if(cache[r][c])\n            return cache[r][c];\n        for(int i =0 ;i<4;i++){\n            int nr = dx[i]+r ;\n            int nc = dy[i]+ c;\n            if(nr>=0 && nc>=0 && nr<matrix.size() && nc < matrix[0].size() &&\n               matrix[nr][nc] > matrix[r][c]\n              ){\n                cache[r][c] = max(cache[r][c],dfs(matrix,nr,nc));\n            }\n        }\n        return ++ cache[r][c];\n    }\n    \n        \n        \n    \n    int longestIncreasingPath(vector<vector<int>>& matrix) {\n        int n = matrix.size();int m = matrix[0].size();\n        memset(cache ,0,sizeof(cache));\n        \n        int ans =0 ;\n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j<m;j++){\n                ans = max(ans ,dfs(matrix,i ,j));\n            }\n        }\n        return ans ;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix"}