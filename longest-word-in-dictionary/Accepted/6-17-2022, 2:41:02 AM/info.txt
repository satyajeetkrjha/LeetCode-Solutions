{"id":724232117,"lang":"cpp","time":"2 months, 1 week","timestamp":1655448062,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/724232117/","is_pending":"Not Pending","title":"Longest Word in Dictionary","memory":"32.8 MB","code":"\nstruct Node{\n   Node* links[26];\n   bool flag = false ;\n    \n   void setEnd(){\n       flag = true;\n   }\n   bool isEnd(){\n       return flag ;\n   }\n   \n    void put (char ch ,Node* node){\n        links[ch-'a'] =node;\n    }\n    \n    Node* get (char ch){\n        return links[ch-'a'];\n    }\n    \n    bool containsKey(char ch){\n        return links[ch-'a'] !=NULL;\n    }    \n};\n\nclass Solution {\nprivate:\n    Node* root ;\n    \n    \n    \npublic:\n    Solution(){\n       root = new Node();\n    }\n    \n    void insert(string word){\n        Node* node = root ;\n        int n = word.size();\n        for(int i =0 ;i< n;i++){\n            char ch = word[i];\n            if(!node->containsKey(ch)){\n                node->put(ch,new Node());\n            }\n            node = node ->get(ch);\n        }\n        node->setEnd();\n    }\n    \n    \n    bool search (string word){\n        int count = 0 ;\n        Node *node = root ;\n        for(int i =0 ;i< word.size();i++){\n            char ch = word[i] ; // each char \n            node = node ->get(ch);\n            if(node->isEnd())\n                count ++;\n                \n        }\n        return word.size() == count ;\n    }\n    \n    \n    \n    string longestWord(vector<string>& words) {\n       \n        string ans ;\n        for(int i =0 ;i< words.size();i++){\n            string word = words[i];\n            insert(word);\n        }\n        \n        for(int i =0  ;i< words.size();i++){\n            string word = words[i];\n            if(ans.size()  > word.size()) \n                continue ;\n            \n            bool found = search(word); \n            if(found && word.size()> ans.size()){\n                ans  = word ;\n            }\n            else if (found && word.size() == ans.size()){\n                ans = min(ans,word) ; // pick lexicographically smaller word\n            }\n        }\n        return ans ;    \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"longest-word-in-dictionary"}