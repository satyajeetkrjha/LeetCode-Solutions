{"id":719455677,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1654936618,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/719455677/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        \n        int pval  = p->val ;\n        int qval = q->val; \n        \n        TreeNode* cur = root ;\n    \n        while(cur!=NULL){\n            \n            int parentval = cur->val ;\n            if(pval > parentval && qval > parentval){\n                cur= cur->right;\n            }\n            else if(parentval >pval && parentval > qval){\n                cur= cur->left;\n            }\n            else\n                return root;\n        }\n        \n        \n        return NULL;\n        \n        \n        \n    }\n};","compare_result":"101111111111010001010100000","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}