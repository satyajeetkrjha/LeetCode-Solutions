{"id":716036132,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1654551776,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/716036132/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\n\nclass Solution {\npublic:\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        int rootval = root->val ;\n        int pval = p->val;\n        int qval = q->val;\n        if(pval > rootval && qval > rootval){\n          lowestCommonAncestor(root->right ,p ,q);\n        }\n        else if(pval < rootval && qval < rootval){\n          lowestCommonAncestor(root->left, p, q);\n        }\n        cout <<\"root->val is\"<<root->val << endl;\n        return root ;\n        \n    }\n};","compare_result":"101111111111010001010100000","title_slug":"lowest-common-ancestor-of-a-binary-search-tree"}