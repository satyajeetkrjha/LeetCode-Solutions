{"id":732885514,"lang":"cpp","time":"1 month, 4 weeks","timestamp":1656362661,"status_display":"Accepted","runtime":"677 ms","url":"/submissions/detail/732885514/","is_pending":"Not Pending","title":"LRU Cache","memory":"175.5 MB","code":"class LRUCache {\npublic:\n    class node{\n        public:\n        int key ;\n        int val ;\n        node* prev ;\n        node* next ;\n        node(int _key,int _val){\n            key = _key;\n            val =_val;\n        }\n    };\n    node* head = new node(-1,-1);\n    node* tail = new node(-1,-1);\n    \n    int cap ;\n    unordered_map <int ,node*> m ;\n    \n    \n    void addnode(node* newnode){\n        node* temp = head->next;\n        newnode->next = temp ;\n        newnode->prev = head ;\n        head->next = newnode ;\n        temp->prev = newnode ;\n    }\n    \n    void deletenode(node *deletenode){\n        node* deletenext = deletenode->next;\n        node* deleteprev = deletenode->prev ;\n        deleteprev->next = deletenext ;\n        deletenext->prev = deleteprev ;\n    }\n\n    LRUCache(int capacity) {\n        cap =capacity ;\n        head->next = tail ;\n        tail->prev = head ;\n    }\n    \n    int get(int _key) {\n        if(m.find(_key)!= m.end()){\n            node *resnode = m[_key];\n            int resval = resnode->val ;\n            deletenode(resnode);\n            addnode(resnode);\n            m[_key] = head->next ;\n            return resval ;\n        }\n        return -1 ;\n    }\n    \n    void put(int _key, int value) {\n        if(m.find(_key)!= m.end()){\n            node *resnode = m[_key];\n            m.erase(_key);\n            deletenode(resnode);\n        }\n        if(m.size() == cap){\n            m.erase(tail->prev->key);\n            deletenode(tail->prev);\n        }\n        addnode(new node(_key,value));\n        m[_key] = head->next;\n        \n    }\n};\n\n","compare_result":"1111111111111111111111","title_slug":"lru-cache"}