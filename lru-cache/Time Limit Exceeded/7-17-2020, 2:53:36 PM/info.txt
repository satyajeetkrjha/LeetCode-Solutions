{"id":367962401,"lang":"cpp","time":"2 years, 1 month","timestamp":1595012016,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/367962401/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"//by razi\n#include <iostream>\nclass LRUCache {\npublic:\n  \n  set<pair<int, int>> old;\n  map<int, int> val, time;\n  int t, cap;\n  LRUCache(int capacity) {\n    cap= capacity;\n    t= 0;\n  }\n\n  int get(int key) {\n    if (val. count (key) ==0) return -1;\n    old. erase ({time [key], key});\n       cout << \"\\nThe set s1 after erasing  in get is : \"; \n    \n     for (auto const &x : old) { \n\n        cout << \"(\" << x.first << \", \"\n             << x.second << \")\"\n             << \" \"; \n    }    \n      \n    old. insert ({time [key]= t++, key});\n       cout << \"\\nThe set s1 after insert operation in get   is : \"; \n    \n     for (auto const &x : old) { \n\n        cout << \"(\" << x.first << \", \"\n             << x.second << \")\"\n             << \" \"; \n    }   \n    return val[key];\n  }\n\n  void put(int key, int value) { \n    if (time. count (key)>0) { \n        cout<<\"key is \"<<key<<endl;\n      old. erase ({time [key], key});\n    }\n\n    val[key] = value;\n  //  cout<<\"val is \"<< t<<\" \"<<key<<endl;  \n    old. insert ({time [key]= t++, key});\n      cout<<\"time is \"<<endl;  \n        for (auto const& x : time)\n{\n    std::cout << x.first  // string (key)\n              << ':' \n              << x.second // string's value \n              << std::endl ;\n}\n    set <pair<int, int> > :: iterator itr; \n    cout << \"\\nThe set s1 in put  is : \"; \n    \n     for (auto const &x : old) { \n\n        cout << \"(\" << x.first << \", \"\n             << x.second << \")\"\n             << \" \"; \n    }\n      cout<<endl;\n      \n      \n    if (old. size () > cap) {\n      auto p = *old. begin ();\n      old. erase (old. begin ());\n           cout << \"\\nThe set after erasing due to oversize is : \"; \n    \n     for (auto const &x : old) { \n\n        cout << \"(\" << x.first << \", \"\n             << x.second << \")\"\n             << \" \"; \n    }  \n        cout<<endl;\n        \n      val. erase (p. second);\n      time. erase (p. second);\n       cout<<\"oversize time is \"<<endl; \n        for (auto const& x : time)\n{\n    std::cout << x.first  // string (key)\n              << ':' \n              << x.second // string's value \n              << std::endl ;\n}\n        \n    }\n  }\n};\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"111111111111100000","title_slug":"lru-cache"}