{"id":765491482,"lang":"cpp","time":"3Â weeks","timestamp":1659662734,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/765491482/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\npublic:\n    class node{\n      public:\n        int key ;\n        int val ;\n        node* prev ;\n        node* next ;\n        node(int _key ,int _val){\n            key = _key;\n            val = _val;\n        }\n    };\n    \n    node *head = new node(-1,-1);\n    node* tail = new node( -1,-1);\n    \n    int cap ;\n    unordered_map <int ,node*> m;\n    \n    LRUCache(int capacity) {\n        cap = capacity;\n        head->next = tail;\n        tail->prev = head ;\n    }\n    \n    void deleteNode(node* resnode){\n        node* deleteprev = resnode->prev ;\n        node *deletenext = resnode->next;\n        deleteprev->next = deletenext;\n        deletenext->prev = deleteprev;\n    }\n    \n    void addNode(node* newnode){\n        node* temp = head->next ;\n        newnode->next = temp;\n        newnode->prev = head ;\n        head->next = newnode ;\n        temp->prev = newnode;\n        \n    }\n    int get(int key) {\n        if(m.find(key)!=m.end()){\n            auto *resnode = m[key];\n            int retval = resnode->val;\n            deleteNode(resnode);\n            addNode(resnode);\n            m[key] = head->next ;\n            return retval ;\n        }\n        return -1;\n    \n    }\n    \n    void put(int key, int value) {\n        if(m.find(key)!=m.end()){\n            auto *resnode = m[key];\n            deleteNode(resnode);\n            m.erase(key);\n        }\n        if(m.size() == cap){\n            m.erase(tail->prev->key);\n            deleteNode(tail->prev);\n        }\n        addNode(new node(key,value));\n        m[key] = head->next;\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"1111111111111111111100","title_slug":"lru-cache"}