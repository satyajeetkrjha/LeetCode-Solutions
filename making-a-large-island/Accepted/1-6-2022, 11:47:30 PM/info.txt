{"id":614702321,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1641530850,"status_display":"Accepted","runtime":"396 ms","url":"/submissions/detail/614702321/","is_pending":"Not Pending","title":"Making A Large Island","memory":"97.8 MB","code":"class Solution {\npublic:\n    int dfs(vector<vector<int>>& grid,int r ,int c ,int landId){\n        if(r<0 || c<0 || r>= grid.size() || c >= grid[0].size() || grid[r][c]!=1)       {\n            return 0;\n        }\n        grid[r][c]=landId;\n        int left = dfs(grid,r-1,c,landId);\n        int right = dfs(grid,r,c+1,landId);\n        int top = dfs(grid,r+1,c,landId);\n        int bottom = dfs(grid,r,c-1,landId);\n        return left+right+top+bottom+1;\n        \n    }\n    \n    int largestIsland(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int cols = grid[0].size();\n        int landId = 2;\n        map <int ,int> m;\n        for(int i=0;i<n;i++){\n            for(int j =0 ;j<cols;j++){\n                if(grid[i][j] ==1){\n                    // calculate component size for each \n                    int count = dfs(grid,i,j,landId);\n                    m[landId] = count ;\n                    landId++;\n                    \n                }\n                \n            }\n        }\n        \n        cout <<\"landId is \"<<landId<<endl;\n        cout <<m[2]<<endl;\n        \n        int dx[4]={1,-1,0,0};\n        int dy[4]={0,0,1,-1};\n       \n        int maxval = 0;\n        int sum =0;\n        bool flag = false;\n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j<cols;j++){\n                \n                \n                \n                if(grid[i][j] ==0){\n                    flag = true;\n                     set <int> seen ;\n                    sum =0;\n                    for(int k =0 ;k<4;k++){\n                        int nr = i+dx[k];\n                        int nc = j+dy[k];\n                        if(nr >=0 && nc>=0 && nr <grid.size() && nc <grid[0].size()  && grid[nr][nc]!=0){\n                            int corrlandid = grid[nr][nc];\n                            seen.insert(corrlandid);\n                        }\n                    }\n                    \n                    for(auto it :seen){\n                        sum += m[it];\n                    }\n                    maxval = max(maxval,sum);\n                }\n            }\n        }\n        if(!flag){\n            return m[2];\n        }\n        return maxval+1;\n        \n        \n        \n        \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"making-a-large-island"}