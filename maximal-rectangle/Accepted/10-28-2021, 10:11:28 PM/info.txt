{"id":578809268,"lang":"cpp","time":"10Â months","timestamp":1635473488,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/578809268/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"12.5 MB","code":"class Solution {\npublic:\n    int histogram( vector <int> heights){\n        \n        /*\n        cout<<\"Printing heights \"<<endl;\n        for(int i =0 ;i<heights.size();i++){\n            cout <<heights[i] << \" \";\n        }\n        cout <<endl;\n        cout <<\"End of printing heihts \"<< endl;\n        */\n        stack <int> st ;\n        st.push(-1);\n        int maxarea =0 ;\n        for(int i =0 ;i<heights.size();i++){\n            while(st.top()!= -1 && heights[st.top()] >= heights[i]){\n                int cur_height = heights[st.top()];\n                st.pop();\n                int cur_width = i - st.top() -1;\n                maxarea = max(maxarea ,cur_height*cur_width);\n            }\n            st.push(i);\n        }\n        \n        while(st.top() !=-1){\n            int cur_height = heights[st.top()];\n            st.pop();\n            int cur_width = heights.size() - st.top() -1 ;\n            maxarea = max(maxarea ,cur_height*cur_width);\n        }\n        return maxarea ;\n    }\n    \n\n    int maximalRectangle(vector<vector<char>>& matrix) {\n        \n        int r = matrix.size() ;\n        if( r == 0)\n            return 0;\n        int c = matrix[0].size() ;\n        vector <int> dp;\n        dp.resize(c+1);\n        for(int i =0 ;i<dp.size();i++){\n            dp[i] =0;\n        }\n        int maxarea =0;\n        for(int i =0 ;i<r;i++){\n            for(int j =0;j<c;j++){\n                dp[j] = matrix[i][j] == '1' ? dp[j]+1 :0;\n            }\n            maxarea = max(maxarea ,histogram(dp));\n            //cout <<\"maxarea is \"<< maxarea <<endl;\n        }\n        return maxarea ;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle"}