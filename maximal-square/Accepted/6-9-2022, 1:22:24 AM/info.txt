{"id":717852116,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1654752144,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/717852116/","is_pending":"Not Pending","title":"Maximal Square","memory":"16.6 MB","code":"class Solution {\npublic:\n    int maximalSquare(vector<vector<char>>& matrix) {\n        int rows  = matrix.size();\n        if(rows == 0){\n            return 0 ;\n        }\n        int cols = matrix[0].size();\n        if(cols == 0)\n            return 0 ;\n        int dp [rows][cols];\n        memset(dp,0,sizeof(dp));\n        \n        \n        \n        for(int i =0 ;i<rows;i++){\n            for(int j =0 ;j<cols ;j++){\n                dp[i][j] = matrix[i][j] == '1' ? 1:0;\n            }\n        }\n        \n        int ans = INT_MIN;\n        for(int i =0 ;i<rows;i++){\n            for(int j=0 ;j<cols ;j++){\n                if(i >0 && j>0 && dp[i][j] >0){\n                    dp[i][j] = min(dp[i][j-1],min(dp[i-1][j],dp[i-1][j-1]))+1;\n                }\n                ans = max(ans ,dp[i][j]);\n                \n            }\n        }\n        \n        return ans*ans  ;\n        \n        \n        \n        \n        \n       \n        for(int i =0 ;i<rows;i++){\n            for(int j =0 ;j<cols ;j++){\n                cout <<dp[i][j]<< \" \";\n            }\n            cout << endl;\n        }\n        \n        return ans *ans;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square"}