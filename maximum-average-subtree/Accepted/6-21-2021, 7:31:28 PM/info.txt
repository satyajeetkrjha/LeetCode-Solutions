{"id":511314896,"lang":"cpp","time":"1 year, 2 months","timestamp":1624318288,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/511314896/","is_pending":"Not Pending","title":"Maximum Average Subtree","memory":"21.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n     pair<int,int>  dfs(TreeNode* root ,double &result){\n        if(!root){\n            return {0,0};\n        }\n        auto[leftsum,leftcount]= dfs(root->left,result);\n        auto[rightsum,rightcount] = dfs(root->right,result);\n        double totalsum = leftsum+root->val+rightsum;\n        int subtreenodecount = leftcount+rightcount+1;\n        result = max(result ,(totalsum/subtreenodecount));\n        return {totalsum,subtreenodecount}; \n         \n        \n    }\n    double maximumAverageSubtree(TreeNode* root) {\n        \n      double result =INT_MIN;\n      dfs(root ,result);\n      return result ;\n        \n    }\n};","compare_result":"111111111111111111111111111111","title_slug":"maximum-average-subtree"}