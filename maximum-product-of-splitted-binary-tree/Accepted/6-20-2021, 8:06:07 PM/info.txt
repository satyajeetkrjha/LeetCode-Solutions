{"id":510852756,"lang":"cpp","time":"1 year, 2 months","timestamp":1624233967,"status_display":"Accepted","runtime":"124 ms","url":"/submissions/detail/510852756/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"89.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\ntypedef long long int ll ;\nclass Solution {\npublic:\n     // this vetor contains sums for all subtree1 as we traverse the tree\n    ll  treesum(TreeNode* root, vector <ll> &sums){\n        if(root == NULL){\n            return 0;\n        }\n        ll leftsum = treesum(root->left,sums);\n        ll rightsum = treesum (root->right,sums);\n        ll totalsum = leftsum+root->val+rightsum;\n        sums.push_back(totalsum);\n        return totalsum;\n        \n    }\n    int maxProduct(TreeNode* root) {\n        vector <ll> sums ;\n        ll totalsum = treesum(root,sums);\n        ll ans =0;\n        for(int i=0;i<sums.size();i++){\n            ans = max(ans ,(sums[i])*(totalsum-sums[i]));\n        }\n        return ans%(1000000007);\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-splitted-binary-tree"}