{"id":578923682,"lang":"cpp","time":"10Â months","timestamp":1635490508,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/578923682/","is_pending":"Not Pending","title":"Maximum Profit in Job Scheduling","memory":"N/A","code":"class Solution {\npublic:\n    int memo[50000];\n    \n    int maxprofit( vector <vector<int>> jobs  ,vector <int> startTime ,int position ,int n){\n        if(position == n ){\n            return 0;\n        }\n        if(memo[position] != -1){\n            return memo[position];\n        }\n        \n        int nextIndex = lower_bound(startTime.begin(),startTime.end(), jobs[position][1]) - startTime.begin();\n        \n        int maxProfitVal = max(maxprofit(jobs,startTime,position+1,n),\n                            jobs[position][2]+ maxprofit(jobs,startTime,nextIndex,n)\n                           );\n         return memo[position] = maxProfitVal;\n        \n        \n    }\n    \n    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {\n        memset(memo,-1 ,sizeof(memo));\n        vector <vector<int>> jobs ;\n        \n        int n = startTime.size();\n        for(int i =0 ;i<n;i++){\n            jobs.push_back({startTime[i],endTime[i],profit[i]});\n        }\n        \n        sort(jobs.begin(),jobs.end()) ;// sorting jobs on the basis of the start time\n        \n        \n        // storing all startTimes after sorting them on the basis of the start time\n        for(int i =0 ;i<startTime.size();i++){\n            startTime[i] = jobs[i][0];\n        }\n        \n         return maxprofit(jobs,startTime ,0,n);\n        \n        \n        \n        \n        \n    }\n};","compare_result":"111111111111111111111100000","title_slug":"maximum-profit-in-job-scheduling"}