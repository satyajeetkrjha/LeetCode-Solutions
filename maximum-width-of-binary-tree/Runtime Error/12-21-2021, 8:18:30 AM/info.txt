{"id":604981450,"lang":"cpp","time":"8 months, 1 week","timestamp":1640092710,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/604981450/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int widthOfBinaryTree(TreeNode* root) {\n        if(root ==NULL){\n            return 0;\n        }\n        \n        queue <pair <TreeNode*,int> > q;\n        q.push({root,1});\n        \n        int ans = 0 ;\n        while(!q.empty()){\n            int sz = q.size();\n            int l = q.front().second;\n            int r = l;\n            //cout <<\"r is \"<< r << endl;\n            for(int i =0 ;i<sz;i++){\n                TreeNode* curr = q.front().first;\n                r = q.front().second;\n                 q.pop();\n                if(curr->left){\n                   // cout <<\"2*r is \"<< (2*r) << endl;\n                    q.push({curr->left,2*r});\n                } \n                if(curr->right){\n                    q.push({curr->right,2*r+1});\n                }\n                ans = max(ans,r+1-l);    \n            }\n        }\n        return ans ;\n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000","title_slug":"maximum-width-of-binary-tree"}