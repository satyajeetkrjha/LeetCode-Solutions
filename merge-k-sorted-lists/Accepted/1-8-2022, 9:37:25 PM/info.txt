{"id":615928946,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1641695845,"status_display":"Accepted","runtime":"282 ms","url":"/submissions/detail/615928946/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"13.6 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        if(lists.size() == 0 ){\n            return NULL;\n        }\n        \n        while(lists.size()>1){\n            lists.push_back(mergeList(lists[0],lists[1]));\n            lists.erase(lists.begin());\n            lists.erase(lists.begin());\n        }\n        return lists.front();\n        \n    }\n    \n    ListNode* mergeList(ListNode* l1 ,ListNode* l2){\n        if(l1 == NULL)\n            return l2;\n        if(l2 == NULL)\n            return l1;\n        if(l1->val <= l2->val){\n            l1->next = mergeList(l1->next ,l2);\n            return l1;\n        }\n        else{\n            l2->next = mergeList(l1,l2->next);\n            return l2 ;\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}