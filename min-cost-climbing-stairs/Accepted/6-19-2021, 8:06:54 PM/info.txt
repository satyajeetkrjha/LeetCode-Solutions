{"id":510354710,"lang":"java","time":"1 year, 2 months","timestamp":1624147614,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/510354710/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"38.8 MB","code":"class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        // The array's length should be 1 longer than the length of cost\n        // This is because we can treat the \"top floor\" as a step to reach\n        int minimumCost[] = new int[cost.length + 1];\n        \n        // Start iteration from step 2, since the minimum cost of reaching\n        // step 0 and step 1 is 0\n        for (int i = 2; i < minimumCost.length; i++) {\n            int takeOneStep = minimumCost[i - 1] + cost[i - 1];\n            int takeTwoSteps = minimumCost[i - 2] + cost[i - 2];\n            minimumCost[i] = Math.min(takeOneStep, takeTwoSteps);\n        }\n        \n        // The final element in minimumCost refers to the top floor\n        return minimumCost[minimumCost.length - 1];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs"}