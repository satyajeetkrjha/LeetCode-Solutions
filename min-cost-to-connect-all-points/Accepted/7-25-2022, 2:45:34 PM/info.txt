{"id":756570217,"lang":"cpp","time":"1Â month","timestamp":1658774734,"status_display":"Accepted","runtime":"1503 ms","url":"/submissions/detail/756570217/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"63.8 MB","code":"\nstruct Node{\n    int u ,v,w ;\n    Node(int _u ,int _v ,int _w){\n        u = _u ;\n        v = _v;\n        w = _w;\n        \n    }\n};\n\n\nvector <int> parent ;\n\nint find(int u ){\n    while(parent[u]!=u){\n      u = parent[u];\n    }\n    return u ;\n}\n\n\nvoid unionfun(int u ,int v){\n    int p1 = find(u);\n    int p2 = find(v);\n    if(p1 !=p2){\n        parent[p1] =p2; \n    }\n}\n\n\n\nclass Solution {\npublic:\n    \n    static const bool comp(const Node a ,const Node b){\n        return a.w < b.w ;\n    }\n    \n    int minCostConnectPoints(vector<vector<int>>& points) {\n        \n        \n        \n        vector <Node> edges ;\n        \n        for(int i  =0; i< points.size();i++){\n           for( int j = i+1 ;j<points.size();j++){\n                int dist = abs(points[j][0]- points[i][0]) + abs(points[j][1]-points[i][1]);\n                edges.push_back(Node(i,j,dist));\n            }\n        }\n        int n = edges.size();\n        sort(edges.begin(),edges.end(),comp);\n        parent.resize(n+2);\n        for(int i = 0 ;i<=n;i++){\n            parent[i] = i ;\n        }\n        int cost = 0 ;\n        for(int i =0 ;i<edges.size();i++){\n            int u = edges[i].u ;int v = edges[i].v;int w = edges[i].w;\n            if(find(u) != find(v)){\n                unionfun(u,v);\n                cost += w ;\n            }\n        }\n        return cost;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points"}