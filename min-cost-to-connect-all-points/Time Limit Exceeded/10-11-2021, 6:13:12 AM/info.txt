{"id":569369031,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1633947192,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/569369031/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"N/A","code":"#include <algorithm>\nint parent[100005];\nint ranks[1000005];\n\nclass Node{\n  public:\n  int u ,v,w ;\n  Node(int x ,int y ,int z){\n      u = x;\n      v= y ;\n      w=z;\n  }\n};\n    \n    int find(int u){\n        if(parent[u] == u){\n            return u ;\n        }\n        return parent[u] =find(parent[u]);\n    }\n    void unionfun(int x ,int y){\n        int u = find(x);\n        int v = find(y);\n        \n        if(ranks[u]> ranks[v]){\n            parent[v]=u;\n        }\n        else if(ranks[v]> ranks[u]){\n            parent[u] = v;\n         }\n        else{\n            parent[u]=v;\n            ranks[v]++;\n        }\n        \n    }\n\nclass Solution {\npublic:\n    static bool compweight(const Node first ,const Node second){\n        return first.w <second.w;\n    }\n    \n    int minCostConnectPoints(vector<vector<int>>& points) {\n      memset(ranks ,0,sizeof(ranks));\n      memset(parent ,0,sizeof(parent));\n      vector <Node> V ;\n      for(int i =0 ;i<points.size()-1;i++){\n          for(int j = i+1;j<points.size();j++){\n          int dist = abs(points[j][0]- points[i][0])+\n                  abs(points[j][1] -points[i][1]);\n          V.push_back(Node(i,j,dist));\n         \n           }\n      }\n        cout<<\"Before sorting \"<<endl;\n        for(int i =0 ;i<V.size();i++){\n            cout<<V[i].u << \" \"<<V[i].v << \" \"<<V[i].w <<endl;\n        }\n        cout<<\"--------\"<<endl;\n        sort(V.begin(),V.end(),compweight);\n        for(int i =0 ;i<=V.size();i++){\n            parent[i]=i;\n            ranks[i]=0;\n        }\n        int totaledges = V.size();\n        int totalcost =0;\n        for(int i =0 ;i<totaledges ;i++){\n            int u = V[i].u;int v = V[i].v ;int w = V[i].w ;\n            cout<<\"u ,v and w are \"<< u <<\" \"<< v << \" \"<<w<<endl;\n            if(find(u)!=find(v)){\n                cout<<\"inisde this \"<<endl;\n                totalcost+= w;\n                unionfun(u ,v);\n            }\n        }\n       return totalcost ;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111110000000000000000","title_slug":"min-cost-to-connect-all-points"}