{"id":606930349,"lang":"cpp","time":"8Â months","timestamp":1640443127,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/606930349/","is_pending":"Not Pending","title":"Minimum Cost to Make at Least One Valid Path in a Grid","memory":"N/A","code":"class Solution {\npublic:\n    int dx[4] ={1,-1,0,0};\n    int dy[4] ={0,0,1,-1};\n    int minCost(vector<vector<int>>& grid) {\n        \n        int n = grid.size();\n        int m = grid[0].size();\n        \n        int dist[n+1][m+1];\n        \n        for(int i =0 ;i<n ;i++){\n            for(int j =0 ;j<m;j++){\n                dist[i][j] = INT_MAX;\n            }\n        }\n        \n        \n        deque<pair <int ,int> > q;\n        q.push_back({0,0});\n        dist[0][0] =0 ;\n        \n        while(!q.empty()){\n            auto curr = q.front();\n            q.pop_front();\n            \n            int x  = curr.first ;\n            int y  = curr.second ;\n            int dir = grid[x][y];\n            \n            for(int i =0 ;i<4;i++){\n                int newx = x+ dx[i];\n                int newy = y + dy[i];\n                \n                int val = 1;\n                if(i+1 == dir){\n                    val  = 0;\n                }\n                if( newx >= 0 && newx<n && newy >=0 && newy < m){\n                     if(dist[newx][newy] > dist[x][y]+ val){\n                         dist[newx][newy] = dist[x][y]+ val;\n                         if(val == 1){\n                             q.push_back({newx,newy});\n                         }\n                         else{\n                             q.push_front({newx,newy});\n                         }\n                     }\n                }\n                \n            }\n        }\n       return  dist[n-1][m-1];\n    }\n};","compare_result":"00111000111000001111100101010010000000001001000000000000000100100000","title_slug":"minimum-cost-to-make-at-least-one-valid-path-in-a-grid"}