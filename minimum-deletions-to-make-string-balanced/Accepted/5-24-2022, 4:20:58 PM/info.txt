{"id":706451686,"lang":"cpp","time":"3Â months","timestamp":1653423658,"status_display":"Accepted","runtime":"88 ms","url":"/submissions/detail/706451686/","is_pending":"Not Pending","title":"Minimum Deletions to Make String Balanced","memory":"22.4 MB","code":"\n/*\n\n1. You can always take current character if it's b because\na substring ending with b can't be made invalid by the last b\n2. If it's a, you can:\n2a. Either drop it with cost dp[i]+1, or\n2b. Keep it, in which case you need to drop every b seen till now\n\n\n*/\n\nclass Solution {\npublic:\n    int minimumDeletions(string s) {\n        int l = s.size();\n        int dp[l+1];\n        memset(dp,0,sizeof(dp));\n        \n        int bcount =0 ;\n        for(int i =0 ;i < l ;i++){\n            char c = s[i];\n            if(c == 'a'){\n                dp[i+1] = min(dp[i]+1,bcount);\n            }\n            else{\n                dp[i+1]= dp[i];\n                bcount++;\n            }\n        }\n    \n        return dp[l];\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-deletions-to-make-string-balanced"}