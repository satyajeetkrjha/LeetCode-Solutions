{"id":720006262,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1654989241,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/720006262/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"N/A","code":"class Solution {\npublic:\n    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {\n        int indegree[n];\n        memset(indegree ,0,sizeof(indegree));\n        vector <int> adj[n];\n        for(int i =0 ;i< edges.size();i++){\n            int u = edges[i][0];int v = edges[i][1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n            indegree[u]++ ;\n            indegree[v]++;\n        }\n        \n        // push all leaf nodes in queue and remove them \n        queue <int> q ;\n        for(int i =0 ;i<n;i++){\n            if(indegree[i] == 1)\n                q.push(i);\n        }\n        \n        \n        vector <int> res ;\n        while(!q.empty()){\n            int sz = q.size();\n            res.clear();\n            for(int i =0 ;i< sz;i++){\n                auto cur = q.front();\n                q.pop();\n                res.push_back(cur);\n                indegree[cur]--;\n                for(auto neigh :adj[cur]){\n                    indegree[neigh]--;\n                    if(indegree[neigh] == 1){\n                        q.push(neigh);\n                    }\n                } \n            }\n        }\n        return res ;\n        \n          \n    }\n};","compare_result":"11011111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-height-trees"}