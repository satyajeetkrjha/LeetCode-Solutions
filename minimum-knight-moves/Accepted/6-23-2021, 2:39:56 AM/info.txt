{"id":511962913,"lang":"cpp","time":"1 year, 2 months","timestamp":1624430396,"status_display":"Accepted","runtime":"184 ms","url":"/submissions/detail/511962913/","is_pending":"Not Pending","title":"Minimum Knight Moves","memory":"42.4 MB","code":"class Solution {\npublic:\n    int minKnightMoves(int x, int y) {\n        int dx[8] ={-2,-2,2,2,-1,-1,1,1};\n        int dy[8] ={-1,1,-1,1,-2,2,2,-2};\n        queue < pair <int,int> > q;\n        q.push(make_pair(0,0));\n       \n        bool visited[605][605];\n        memset(visited,false ,sizeof(visited));\n         visited[0][0]=true;\n        int steps =0;\n        while(!q.empty()){\n            int sz = q.size();\n            for(int i =0;i<sz;i++){\n                pair <int ,int> cur =q.front();\n                q.pop();\n                if(cur.first == x && cur.second == y){\n                    return steps ;\n                }\n                for(int i =0;i<8;i++){\n                    int nr = cur.first+dx[i];\n                    int nc = cur.second +dy[i];\n                    // nr and nc may be negative and we cannot have negative indees\n                    if(visited[nr+302][nc+302] == false){\n                        q.push(make_pair(nr,nc));\n                        visited[nr+302][nc+302] =true ;\n                    }\n                    \n                \n                }\n            }\n            steps ++;\n        }\n        return steps ;\n            \n    }\n};","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-knight-moves"}