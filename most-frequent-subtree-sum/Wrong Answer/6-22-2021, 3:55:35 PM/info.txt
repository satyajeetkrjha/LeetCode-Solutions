{"id":511747595,"lang":"cpp","time":"1 year, 2 months","timestamp":1624391735,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/511747595/","is_pending":"Not Pending","title":"Most Frequent Subtree Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int dfs (TreeNode* root , map <int ,vector <int>> &m){\n        if(!root){\n            return 0;\n        }\n        int leftsum = dfs(root->left,m);\n        int rightsum = dfs(root->right,m);\n        int totalsum = leftsum +root->val+rightsum;\n        m[totalsum].push_back(totalsum);\n        return totalsum;\n    }\n    vector<int> findFrequentTreeSum(TreeNode* root) {\n       map <int ,vector <int> > m;\n       vector <int> ans;\n       dfs(root,m);\n       int maxval =0;\n       map <int ,vector <int> >::iterator it ;\n        for(it = m.begin();it!=m.end();it++){\n            vector <int> v = it->second ;\n            int sz = v.size();\n            maxval =max(maxval,sz);\n            \n        }\n        cout<<\"maxval is \"<<maxval <<endl;\n        map <int ,vector <int> >::iterator itr ;\n        for(itr = m.begin();itr!=m.end();itr++){\n            vector <int> v = itr->second ;\n            int sz = v.size();\n            if(sz == maxval){\n               for(int j =0;j<v.size();j++){\n                   ans.push_back(v[j]);\n               }  \n            } \n        }\n        return ans ;\n        \n    }\n};","compare_result":"1011111100001110111111111111111111111111111111111101011000","title_slug":"most-frequent-subtree-sum"}