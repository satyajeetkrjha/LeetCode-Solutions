{"id":519928045,"lang":"cpp","time":"1 year, 1 month","timestamp":1625855627,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/519928045/","is_pending":"Not Pending","title":"N-Queens","memory":"N/A","code":"class Solution {\npublic:\n    vector< vector<string> > ans ;\n    bool is_valid(vector <string> baord,int row,int column){\n        // we will check column ,left diagonal and right diagonal but not row because we always place in a new row \n        \n        // first column check so if you  place at some row and theck for all columns\n        for(int i = row ;i>=0;i--){\n            if(board[i][column] == 'Q'){\n                return false;\n            }\n        }\n        // check left diagonal before the specific row \n        \n        for(int i = row ,j= column; i>=0 && j>=0 ;i--,j--){\n            if(board[i][j] =='Q'){\n                return false;\n            }\n        }\n        \n        //check right diagonal before the specific row \n        \n        for(int i =row,j=column ;i>=0 && j<board.size() ;i--,j++){\n            if(board[i][j] == 'Q'){\n                return false;\n            }\n        }\n        return true ;\n    }\n    \n    \n    void dfs (vector <string> &board,int row){\n        if( row == board.size()){\n            ans.push_back(board);\n            return ;\n        }\n        for(int i =0; i<board.size();i++){\n            if(is_valid(board,row,i)){\n                board[row][i] ='Q';\n                dfs(board,row+1);\n                board[row][i] ='.';\n            }\n        }\n    }\n    \n    vector<vector<string>> solveNQueens(int n) {\n       if(n<=0 )\n           return {{}};\n        vector <string > board(n ,string(n,'.'));// create a board and mark all empty\n        dfs(board,0);\n        return ans ;\n        \n    }\n};","compare_result":null,"title_slug":"n-queens"}