{"id":622410365,"lang":"cpp","time":"7 months, 1 week","timestamp":1642498813,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/622410365/","is_pending":"Not Pending","title":"Nested List Weight Sum","memory":"11.2 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\nclass Solution {\npublic:\n    int depthSum(vector<NestedInteger>& nestedList) {\n        return dfs(nestedList,1);\n    }\n    int sum =0 ;\n    int dfs(vector<NestedInteger> nestedlist ,int depth){\n        \n        for(auto it:nestedlist){\n            if(it.isInteger()){\n                sum += it.getInteger()*depth;\n            }\n            else{\n                dfs(it.getList(),depth+1);\n            }\n        }\n        return sum ;\n        \n    }\n    \n    \n    \n    \n};","compare_result":"1111111111111111111111111","title_slug":"nested-list-weight-sum"}