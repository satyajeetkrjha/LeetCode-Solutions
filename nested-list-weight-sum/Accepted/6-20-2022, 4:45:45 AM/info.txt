{"id":726593728,"lang":"cpp","time":"2Â months","timestamp":1655714745,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/726593728/","is_pending":"Not Pending","title":"Nested List Weight Sum","memory":"9.4 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * class NestedInteger {\n *   public:\n *     // Constructor initializes an empty nested list.\n *     NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     NestedInteger(int value);\n *\n *     // Return true if this NestedInteger holds a single integer, rather than a nested list.\n *     bool isInteger() const;\n *\n *     // Return the single integer that this NestedInteger holds, if it holds a single integer\n *     // The result is undefined if this NestedInteger holds a nested list\n *     int getInteger() const;\n *\n *     // Set this NestedInteger to hold a single integer.\n *     void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     void add(const NestedInteger &ni);\n *\n *     // Return the nested list that this NestedInteger holds, if it holds a nested list\n *     // The result is undefined if this NestedInteger holds a single integer\n *     const vector<NestedInteger> &getList() const;\n * };\n */\nclass Solution {\npublic:\n    int depthSum(vector<NestedInteger>& nestedList) {\n         queue <NestedInteger> q;\n         for(NestedInteger nestedInteger :nestedList){\n             q.push(nestedInteger);\n         }\n        int depth = 1 ;\n        int sum =0 ;\n        \n        while(!q.empty()){\n            int sz = q.size();\n            for(int i =0 ;i< sz;i++){\n                NestedInteger nested = q.front();\n                q.pop();\n                if(nested.isInteger()){\n                    sum += nested.getInteger()* depth;\n                }\n                else{\n                    for(NestedInteger nest :nested.getList()){\n                        q.push(nest);\n                    }\n                }\n            }\n            depth++;\n        }\n        return sum;\n    }\n};","compare_result":"1111111111111111111111111","title_slug":"nested-list-weight-sum"}