{"id":516828561,"lang":"cpp","time":"1 year, 1 month","timestamp":1625329491,"status_display":"Accepted","runtime":"488 ms","url":"/submissions/detail/516828561/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"56.6 MB","code":"class Solution {\npublic:\n    \n    // to connect two connected components ,u need one edge and to connect threee connected components ,u need two edge\n    vector<int> adj[100005];\n    bool visited[100005];\n    void dfs (int u){\n       if(visited[u])\n           return;\n        visited[u]=true;\n        for(int  i =0;i<adj[u].size();i++){\n            int v= adj[u][i];\n            if(!visited[v])\n                dfs(v);\n        }\n    }\n    \n    \n    int makeConnected(int n, vector<vector<int>>& connections) {\n        if(connections.size()<n-1){\n            return -1;\n        }\n        for(int i =0;i<n;i++){\n            adj[i].clear();\n        }\n        for(int i =0;i<n;i++){\n            visited[i]=false;\n        }\n        for(int i =0;i<connections.size();i++){\n            vector <int> vec= connections[i];\n            for(int j =0;j<vec.size();j++){\n                int u =vec[0];int v = vec[1];\n                adj[u].push_back(v);\n                adj[v].push_back(u);\n            }\n        }\n        \n      \n        int ans =0;\n        for(int i =0;i<n;i++){\n            if(!visited[i]){\n                dfs(i);\n                ans++;\n            }\n        }\n        return ans-1 ;\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected"}