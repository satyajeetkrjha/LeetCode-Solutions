{"id":618110783,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1641964366,"status_display":"Accepted","runtime":"484 ms","url":"/submissions/detail/618110783/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"114 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    \n    int findlen(ListNode* head){\n        \n        int len =0 ;\n        while(head!=NULL){\n            len++;\n            head = head->next;\n        }\n        \n        return len ;\n    }\n    \n    ListNode* half(ListNode* head){\n        ListNode* slow = head ;\n        ListNode* fast = head ;\n        while(fast && fast->next){\n            slow = slow->next ;\n            fast = fast->next->next;\n        }\n        return slow;\n    }\n\n    ListNode* reverse(ListNode* head){\n        ListNode* prev =NULL;\n        ListNode* cur = head ;\n        ListNode* next ;\n        while(cur){\n            next = cur->next ;\n            cur->next = prev ;\n            prev = cur;\n            cur = next;\n        }\n        head = prev ;\n        return head ;\n    }\n    bool isPalindrome(ListNode* head) {\n        \n        int len = findlen(head);\n        ListNode* mid = half(head);\n        mid = reverse(mid);\n        int c = 0 ;\n        ListNode* cur = head ;\n        while( c< len/2){\n            if(mid->val != cur->val){\n                return false;\n            }\n            cur = cur->next ;\n            mid = mid->next;\n            c++;\n        }\n        return true;\n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list"}