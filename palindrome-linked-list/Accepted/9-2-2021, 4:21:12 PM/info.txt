{"id":548544314,"lang":"cpp","time":"11 months, 3 weeks","timestamp":1630614072,"status_display":"Accepted","runtime":"196 ms","url":"/submissions/detail/548544314/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"114 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    int lengthoflinkedlist(ListNode* head){\n        ListNode* cur = head ;\n        int l =0 ;\n        while( cur!=NULL){\n            cur = cur->next ;\n            l++;\n        }\n        return l;\n    }\n    \n    ListNode* middleoflinkedlist(ListNode* head){\n        ListNode* slow = head;\n        ListNode* fast = head;\n        while(fast !=NULL && fast->next !=NULL){\n            slow = slow ->next ;\n            fast = fast->next->next;\n        }\n        return slow ;\n    }\n    \n    ListNode* reverseLinkedList(ListNode* head){\n        \n        // cout<<\"called\"<<endl;\n        ListNode* prev = NULL;\n        ListNode* cur= head;\n        ListNode* next;\n        while(cur!=NULL){\n            // store the address of the next node\n            next = cur->next ;\n            // break the link by making it point to null\n            cur->next = prev ;\n            prev = cur;\n            cur=next;\n        }\n        head = prev;\n        // cout<<\"head->val is \"<<head->val<<endl;\n        return head ;\n        \n    }\n    \n    void printLinkedList(ListNode* head){\n        ListNode* cur = head ;\n        while(cur!=NULL){\n            cout<<cur->val<<\" \";\n            cur = cur->next ;\n        }\n        cout<<endl;\n        cout<<\"------\"<<endl;\n    }\n    \n    bool isPalindrome(ListNode* head) {\n        // first find the length of the linked list .Next ,find the middle portion of the linked list and reverse the middle half .Now compare the two .\n        int len =lengthoflinkedlist(head);\n        ListNode* mid =middleoflinkedlist(head);\n        // printLinkedList(mid);\n        mid = reverseLinkedList(mid);\n        // printLinkedList(mid);\n        \n        int count = 0 ;\n        ListNode* cur = head;\n        while(count <len/2){\n            if(cur->val !=mid->val){\n                return false;\n            }\n            cur = cur->next ;\n            mid= mid->next ;\n            count++;\n        }\n        return true ;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-linked-list"}