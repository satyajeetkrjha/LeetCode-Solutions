{"id":752350093,"lang":"cpp","time":"1Â month","timestamp":1658350013,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/752350093/","is_pending":"Not Pending","title":"Palindromic Substrings","memory":"10.6 MB","code":"class Solution {\npublic:\n    int countSubstrings(string s) {\n        // dp(i,j) tells us whether the substring from  i to j is a palindrome or not\n        // so dp(i,j) = 1 means palindrome\n        // and dp(i,j) = 0 means non palindrome\n        \n        int n = s.size();\n        int dp[n][n];\n        int ans =0 ;\n        \n        // all substrings of lenth 1 is a palindrome\n        for(int i =0 ;i < n ;i++){\n            dp[i][i] = 1;\n            ans ++;\n        }\n        \n        // now we will solve for palindromes of lenggth 2 \n        \n        //dp(i,i+1) means words of size 2 length\n        for(int i =0 ;i< n-1;i++){\n            dp[i][i+1] = s[i] == s[i+1] ? 1 :0;\n            ans += dp[i][i+1];\n        }\n        \n        \n        \n        /*\n        \n        now we will solve for palindromes of length 3 and greater than 3 \n        we will check whether the last and the first word of the considered word is same or not.if they are same then we just need to check if \n        dp(i+1 ,j-1) is true or not because dp(i+1,j-1) solves for the substring \n     i-1......... j-1 and we already solved this previously\n        \n        */\n        \n        for(int len = 3 ;len <= n;len++){\n            for(int i = 0 ,j = i+len-1;  j<n;i++,j++){\n                dp[i][j] = dp[i+1][j-1] && s[i] == s[j] ;\n                ans += dp[i][j];\n            }\n        }\n        return ans ;\n        \n        \n        \n        \n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindromic-substrings"}