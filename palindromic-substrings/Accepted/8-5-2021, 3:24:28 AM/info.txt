{"id":533606764,"lang":"cpp","time":"1Â year","timestamp":1628148268,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/533606764/","is_pending":"Not Pending","title":"Palindromic Substrings","memory":"10.8 MB","code":"class Solution {\npublic:\n    int countSubstrings(string s) {\n        int n = s.size();\n        int dp[n+1][n+1];\n        // dp (i,j) tells us whethere substring from index i to index j in string s is a palindrome\n        for(int i =0 ;i<n+1;i++){\n            for(int j=0 ;j<n+1;j++){\n                dp[i][j] =0;\n            }\n        } \n        \n        // all single letters of string is a palindrome which is dp(i,i)\n        //starts at i and ends  at i\n        int ans=0;\n        for(int i =0 ;i<n;i++){\n            dp[i][i] =1 ; \n            ans++;\n        }\n        \n        // all two letter strings calculated\n        for(int i =0 ;i<n-1;i++){\n            dp[i][i+1] =s[i] == s[i+1] ? 1:0;\n            ans += dp[i][i+1];\n        }\n        \n        for(int len = 3 ;len<=n;len++){\n            for(int i =0 ,j = i+len-1; j<n; j++,i++){\n                // cout<<\" i and j are \"<<i <<\" \"<<j<<endl;\n                // cout<<\"substring length is \"<<len<<endl;\n                dp[i][j] = dp[i+1][j-1] && s[i]== s[j];\n                ans+= dp[i][j];\n            }\n        \n        }\n        return ans;  \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindromic-substrings"}