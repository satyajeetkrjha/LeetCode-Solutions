{"id":759547991,"lang":"cpp","time":"3 weeks, 6 days","timestamp":1659067060,"status_display":"Accepted","runtime":"2537 ms","url":"/submissions/detail/759547991/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"228.1 MB","code":"class Solution {\npublic:\n    vector <int> nums ;\n    \n    bool flag = false ;\n    int sum ;\n    map <pair <int,int> ,int>m;\n    int backtrack(int index ,int cursum,vector<int>&nums){\n        \n        \n        if(index>=nums.size()){\n            return cursum == (sum/2) ? 1 : 0 ;\n        }\n        auto it = m.find({index,cursum});\n        if(it!=m.end()){\n            return it->second ;\n        }\n        m[{index,cursum}] =backtrack(index+1,cursum+nums[index],nums)\n         || backtrack(index+1,cursum,nums);\n        return m[{index,cursum}];\n    }\n    \n    \n    \n    \n    \n    \n    \n    \n    bool canPartition(vector<int>& nums) {\n       \n        sum = 0 ;\n        for(int i =0 ;i<nums.size();i++){\n            sum += nums[i];\n        }\n        if(sum %2 !=0)\n            return false ;\n        return backtrack(0,0,nums);\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum"}