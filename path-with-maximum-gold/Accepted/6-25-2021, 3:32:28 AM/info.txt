{"id":512917363,"lang":"cpp","time":"1 year, 2 months","timestamp":1624606348,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/512917363/","is_pending":"Not Pending","title":"Path with Maximum Gold","memory":"7.3 MB","code":"class Solution {\npublic:\n     int visited[100][100];\n    int dfs (vector<vector<int>>& grid,int r,int c,int n,int m){\n         if( r>=n || c>=m || r <0 || c<0){\n             return 0;\n         }\n         if(visited[r][c] ==1 || grid[r][c] ==0){\n            return 0;   \n         }\n        visited[r][c] =1;\n        int gold = grid[r][c];\n        int left = dfs(grid,r-1,c,n,m);\n        int right = dfs(grid,r+1,c,n,m);\n        int top = dfs(grid,r,c+1,n,m);\n        int bottom = dfs(grid,r,c-1,n,m);\n        visited[r][c] =0;\n        int temp =max({left,right,top,bottom});\n        return gold+temp;\n        \n        \n    }\n        \n        \n    int getMaximumGold(vector<vector<int>>& grid) {\n       int r = grid.size();\n       int c = grid[0].size();\n       int maxgold =0;\n        \n       memset(visited,0,sizeof(visited));\n        \n        for(int i=0;i<r;i++){\n            for(int j=0;j<c;j++){\n               int gold = dfs(grid,i,j,r,c);\n                maxgold = max(maxgold,gold);\n            }\n        }\n        return maxgold;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-gold"}