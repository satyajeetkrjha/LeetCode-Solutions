{"id":699802355,"lang":"cpp","time":"3 months, 1 week","timestamp":1652592007,"status_display":"Accepted","runtime":"513 ms","url":"/submissions/detail/699802355/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"44.5 MB","code":"class Solution {\npublic:\n    int dx[4] ={1,-1,0,0};\n    int dy[4] ={0,0,-1,1};\n    \n    bool bfs(int val ,vector<vector<int>>& heights){\n        int n = heights.size() ;\n        int m = heights[0].size();\n        queue <pair <int ,int> > q;\n         q.push({0,0});\n        int visited[n+1][m+1];\n        memset(visited ,0,sizeof(visited));\n         visited[0][0] = 1;\n       \n        while(!q.empty()){\n            auto cur = q.front() ;\n            q.pop();\n            if(cur.first == n-1 && cur.second == m-1){\n                return true ;\n            }\n            for(int i =0 ;i< 4 ;i++){\n                int nr = dx[i]+  cur.first ;\n                int nc = dy[i] + cur.second ;\n                \n                if(nr >=0 && nc>=0 && nr < n && nc < m && !visited[nr][nc]){\n                    if(abs(heights[nr][nc] - heights[cur.first][cur.second])<=val){\n                        visited[nr][nc] = 1;\n                        q.push({nr,nc});\n                    }\n                }\n            }\n            \n        }\n        return false ;\n        \n    }\n    \n    int minimumEffortPath(vector<vector<int>>& heights) {\n        int low = 0 ;\n        int high = 1e6 ;\n         int ans =0 ;\n        while(low <= high){\n            int mid = (low+high)/2 ;\n            if(bfs(mid,heights)){ // works fine\n                high = mid -1 ;\n                ans = mid ;\n            }\n            else {\n                low = mid+1;\n            }\n        }\n        return ans ;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort"}