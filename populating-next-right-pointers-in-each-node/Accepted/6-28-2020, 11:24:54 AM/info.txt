{"id":359434776,"lang":"cpp","time":"2 years, 1 month","timestamp":1593357894,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/359434776/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"17.1 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n       if(root==NULL)\n           return root;\n       int no=1; // to indicate number of nodes at a level\n       queue <Node*> q;\n       q.push(root);\n       while(!q.empty()){\n           int sz= q.size();\n           for(int i=0;i<sz;i++){\n               Node* cur =q.front();\n               q.pop();\n               Node* next = nullptr;\n               if(i == no-1){\n                   cur->next=next;\n               }\n               else{   \n                    cout<<\"q.size is \"<<q.size()<<endl;\n                    next =q.front();\n                    cur->next =next;\n               }\n               if(cur->left)\n                   q.push(cur->left);\n               if(cur->right)    \n                   q.push(cur->right);\n           }\n           no=no*2; // because it is complete so nodes will be double of current number of nodes\n       }\n        return root;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node"}