{"id":603972894,"lang":"cpp","time":"8 months, 1 week","timestamp":1639910251,"status_display":"Accepted","runtime":"280 ms","url":"/submissions/detail/603972894/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"63.7 MB","code":"class Solution {\npublic:\n    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {\n         vector <int> sides(n+4,-1);\n        queue <int> q;\n        bool isbipartite = false;\n        \n        vector <int> adj[n+5];\n        for(int i =0 ;i<dislikes.size();i++){\n            int u = dislikes[i][0];\n            int v = dislikes[i][1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);  \n        }\n        \n        \n        for(int i = 1;i<=n;i++){\n            if(sides[i] == -1){\n                q.push(i);\n                sides[i] = 0 ;  \n                while(!q.empty()){\n                    int u  = q.front();\n                    q.pop();\n                    cout <<\" u is \"<< u <<endl;\n                    cout <<\"color of u is \"<< sides[u]<<endl;\n                    cout <<\" size is \"<< adj[u].size()<<endl;\n                    for(auto v:adj[u]){\n                        cout <<\"v is ....\"<< v <<endl;\n                        if(sides[v] == -1){\n                            sides[v] = sides[u]^1;\n                            q.push(v);\n                        }\n                        else{\n                           if(sides[u] == sides[v]){\n                               return false;\n                           }\n                        }\n                    }\n                }\n            }\n        }\n        return true ;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition"}