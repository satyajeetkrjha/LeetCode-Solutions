{"id":624484387,"lang":"cpp","time":"7Â months","timestamp":1642749182,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/624484387/","is_pending":"Not Pending","title":"Reconstruct Itinerary","memory":"15.1 MB","code":"class Solution {\npublic:\n    \n    void dfs(string source,\n            map <string ,priority_queue <string ,vector<string> ,greater<string>>> &adj,\n            vector<string> &res\n           )\n    {\n        while(!adj[source].empty()){\n            string neighbour = adj[source].top();\n            adj[source].pop();\n            \n            dfs(neighbour,adj,res);\n        }\n        res.push_back(source);\n        \n    }\n    \n    \n    \n    vector<string> findItinerary(vector<vector<string>>& tickets) {\n       map <string ,priority_queue <string ,vector<string> ,greater<string>>> adj;\n       vector <string> res ;\n       \n        \n         for(auto node :tickets){\n            adj[node[0]].push(node[1]);\n        }\n        dfs(\"JFK\",adj,res);\n        reverse(res.begin(),res.end());\n        return res ;\n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reconstruct-itinerary"}