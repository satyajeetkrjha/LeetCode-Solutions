{"id":718727600,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1654846265,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/718727600/","is_pending":"Not Pending","title":"Reconstruct Itinerary","memory":"15.1 MB","code":"class Solution {\npublic:\n    \n    \n    map <string ,priority_queue <string ,vector <string >,greater <string >>> adj;\n    \n    \n    void dfs( string node ,map <string ,priority_queue <string ,vector <string >,greater <string >>> &adj,vector <string> &res){\n        \n        while(adj[node].size() >0){\n            auto neighbor = adj[node].top();\n            adj[node].pop();\n            dfs(neighbor,adj,res);\n        }\n        \n        cout <<\"node is \"<< node << endl;\n      \n        res.push_back(node);\n             \n    }\n    \n    vector<string> findItinerary(vector<vector<string>>& tickets) {\n     \n        for(auto it :tickets){\n          string u = it[0] ;string v = it[1];\n          adj[u].push(v);\n        } \n        \n      vector <string > res ;\n      dfs(\"JFK\",adj,res);\n      \n    \n      reverse(res.begin(),res.end());\n      return res ;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reconstruct-itinerary"}