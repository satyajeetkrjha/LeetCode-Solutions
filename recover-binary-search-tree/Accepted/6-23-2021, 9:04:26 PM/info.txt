{"id":512316061,"lang":"cpp","time":"1 year, 2 months","timestamp":1624496666,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/512316061/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"58.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void inorder(TreeNode* root ,vector <int> & nums){\n        if(!root){\n            return;\n        }\n        inorder(root->left,nums);\n        nums.push_back(root->val);\n        inorder(root->right,nums);\n    }\n    pair<int,int> swappednodes(vector <int> nums){\n        pair<int,int> values ;\n        int x =-1;int y=-1;\n        for(int i =0;i<nums.size()-1;i++){\n            if(nums[i]>nums[i+1]){\n                y = nums[i+1];\n                if( x == -1){\n                    x =nums[i];\n                }\n                else\n                    break;\n                \n            }\n        }\n        values=make_pair(x,y);\n        return values ;\n    }\n    void recover(TreeNode* root ,int x ,int y ,int steps){\n        if(root ==NULL) return ;\n        if(root->val == x || root->val ==y){\n            if(root->val ==x){\n                root->val = y;\n                steps --;\n                if(steps == 0)\n                    return;\n            }\n            else{\n                root->val = x;\n                steps --;\n                 if(steps == 0)\n                    return;\n            }\n        }\n        recover(root->left,x,y,steps);\n        recover(root->right,x,y,steps);\n    }\n    void recoverTree(TreeNode* root) {\n       vector <int> nums ;\n       inorder(root,nums);\n       int x =  -1 ;int y =-1;\n        for(int i=0;i<nums.size();i++){\n            cout<<\"nums[i] \"<<nums[i]<<endl;\n        }\n       pair <int,int> values =swappednodes(nums); \n       x = values.first;y = values.second;\n        cout<<\"x and y are \"<<x<<\" \"<<y<<endl;\n       int steps =2;\n       recover(root,x,y,steps); \n        \n    }\n};","compare_resulttitle_slug":"recover-binary-search-tree"}