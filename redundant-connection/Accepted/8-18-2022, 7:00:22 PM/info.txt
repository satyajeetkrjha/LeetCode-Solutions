{"id":777311742,"lang":"cpp","time":"1Â week","timestamp":1660863622,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/777311742/","is_pending":"Not Pending","title":"Redundant Connection","memory":"8.8 MB","code":"class Solution {\npublic:\n    vector <int> parent;\n    \n    int findparent(int u){\n        cout <<\"u inside \"<< u << endl;\n        while(u!=parent[u]){\n            u = parent[u];\n        }\n        return u ;\n    }\n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        parent.resize(n+2);\n        for(int i =0 ;i<n+2;i++)\n            parent[i] = i;\n        \n        vector <int> res ;\n        for(int i =0 ;i<n;i++){\n            int u = edges[i][0];int v = edges[i][1];\n            cout <<\"u and v are \"<< u << \" \"<< v << endl;\n            int p1 = findparent(u);\n            int p2 = findparent(v);\n            cout <<\"p1 \"<<p1<<endl;\n            cout <<\"p2 \"<<p2<< endl;\n            if(p1 == p2){\n                res.push_back(u);\n                res.push_back(v);\n                break;\n            }\n            parent[p1] = p2 ;\n        }\n        return res ;\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}