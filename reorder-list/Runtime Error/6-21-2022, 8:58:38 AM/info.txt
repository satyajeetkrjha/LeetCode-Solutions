{"id":727588018,"lang":"cpp","time":"2Â months","timestamp":1655816318,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/727588018/","is_pending":"Not Pending","title":"Reorder List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    \n    ListNode* reverse(ListNode* head){\n        ListNode* cur = head ;\n        ListNode* prev = NULL ;\n        ListNode* next ;\n        \n        while(cur!=NULL){\n            next = cur->next ;\n            cur->next = prev ;\n            prev = cur ;\n            cur = next ;\n        }\n        \n        head = prev ;\n        return head ;\n        \n    }\n    \n    ListNode* merge(ListNode* l1,ListNode* l2){\n        \n        ListNode* dummy = new ListNode(-1);\n        ListNode* cur ;\n        cur = dummy ;\n        bool flag = true ;\n        while(l1!= NULL && l2!=NULL){\n            \n            if(flag){\n                cur->next = l1 ;\n                l1 = l1->next;\n            }\n            else {\n                cur->next = l2 ;\n                l2 = l2->next;\n            }\n            cur = cur->next ;\n            flag = !flag ;\n        }\n        \n        cur->next = l1 !=NULL ? l1 :l2;\n        return dummy->next ;\n        \n    }\n    void reorderList(ListNode* head) {\n        ListNode* slow = head ;\n        ListNode* fast = head ;\n        \n        while(fast && fast->next!=NULL){\n            slow = slow->next ;\n            fast = fast->next->next;\n        }\n        \n      \n       ListNode* head1 = head ;\n       ListNode* head2 = slow->next ;\n     \n       ListNode* reversedhalf = reverse(head2); \n       ListNode* merged = merge(head1,reversedhalf); \n    }\n};","compare_result":"000000000000","title_slug":"reorder-list"}