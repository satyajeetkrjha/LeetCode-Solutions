{"id":754814061,"lang":"cpp","time":"1Â month","timestamp":1658605822,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/754814061/","is_pending":"Not Pending","title":"Reorder List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    \n    ListNode* reverse(ListNode* head){\n        ListNode* prev = NULL ;\n        ListNode* cur = head ;\n       ListNode* next;\n        while(cur!=NULL){\n            next = cur->next ;\n            cur->next = prev ;\n            prev = cur ;\n            cur = next;\n        }\n        return prev;\n    }\n    \n    void merge(ListNode* l1,ListNode* l2){\n        while(l1 && l2){\n            auto next_l1 = l1->next ;\n            auto next_l2  = l2->next ;\n            l1->next = l2 ;\n            l2->next = next_l1 ;\n            l1 = next_l1 ;\n            l2 = next_l2 ;\n        }\n    }\n    \n    \n    \n    void reorderList(ListNode* head) {\n        ListNode* slow = head ;\n        ListNode* fast = head ;\n        while(fast!=NULL && fast->next!= NULL){\n            slow = slow->next ;\n            fast = fast->next->next;\n        }\n        \n        auto head1 =head ;\n        auto head2 = slow->next;\n        slow->next  =NULL ;\n        \n        ListNode* reversedhead = reverse(head2);\n        merge(head1,head2);\n        \n    }\n};","compare_result":"101110000000","title_slug":"reorder-list"}