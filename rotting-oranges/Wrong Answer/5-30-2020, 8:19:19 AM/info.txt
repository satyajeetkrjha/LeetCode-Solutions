{"id":346628974,"lang":"cpp","time":"2 years, 2 months","timestamp":1590841159,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/346628974/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"N/A","code":"#include <iostream>\nusing namespace std;\nclass Solution {\npublic:\n    int orangesRotting(vector<vector<int>>& grid) {\n        int n =grid.size();// number of rows\n        int m =grid[0].size();//number of columns\n        queue <pair<int,int>>q; // a queue of all rotten coordinates\n        \n        int freshOranges =0; \n        int rottenOranges=0;\n        \n        const int  ROTTEN=2;\n        const int  FRESH_ORANGE=1;\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(grid[i][j]==ROTTEN){\n                    rottenOranges++;\n                    pair <int,int> coordinate=make_pair(i,j);\n                    q.push(coordinate);\n                }\n               else if(grid[i][j]==FRESH_ORANGE){\n                    freshOranges++;\n                }\n            }\n        }\n        // look at second testcase \n        if(freshOranges==0){\n            return 0;\n        }\n        if(rottenOranges==0){ // you don't have any rootten orange to infect\n            return -1;\n        }\n        int dx[4]={-1,1,0,0};\n        int dy[4]={0,0,-1,1};\n        int time =0;\n        while(q.size()>0 && freshOranges>0){ // we have rootten ornages to start the bfs and ample freshOranges to inect\n            int numOfRottenOranges= q.size();// total number of corrdinates where we have rotten oranges now\n            for(int i=0;i<numOfRottenOranges;i++){\n                // we will infect all fresh oranges with all these coordinates that we have now\n                pair<int,int> coordinate =q.front();\n                q.pop();\n                for(int i=0;i<4;i++){\n                    int x =dx[i]+coordinate.first;\n                    int y=dy[i]+coordinate.second;\n                    if(x>=0 && x<n && y>=0 && y<m && grid[x][y]==FRESH_ORANGE){ // valid coordinate check and fresh orange check\n                        freshOranges--; // decrease the count of fresh orange by 1 because we just infected it \n                        grid[x][y]=ROTTEN; // make it rotten and now push it to queue\n                        pair<int,int> rooten_coordinate =make_pair(x,y);\n                        q.push(rooten_coordinate);\n                        \n                    }\n                }\n            }\n            time++;\n            \n        }\n        return time;\n        \n    }\n};","compare_result":"101111111111111111111101111011101111111110100111111111111110111101111111001011111000111111101110101110100111111111011111111001111101110101111111111110101001111110111110001111110001010101111110111001101101111111111001111111011001011111110111011100110111010111000110110110011111111011011010111010111101010","title_slug":"rotting-oranges"}