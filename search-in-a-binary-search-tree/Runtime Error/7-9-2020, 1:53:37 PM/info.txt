{"id":364366463,"lang":"cpp","time":"2 years, 1 month","timestamp":1594317217,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/364366463/","is_pending":"Not Pending","title":"Search in a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* dfs(TreeNode* root,int val){\n        cout<<\"root->val is \"<<root->val<<endl;\n        if(root->val == val){\n            return root;\n        }\n        if(root->val <=val ){\n            dfs(root=root->right,val);\n        }\n        if(val< root->val){\n            \n            dfs(root=root->left,val);\n        }\n        return root;\n    }\n    \n    TreeNode* searchBST(TreeNode* root, int val) {\n        if(root==NULL)\n            return root;\n       TreeNode* ans = dfs(root,val);\n        return ans;\n    }\n};","compare_result":"100000000000000000000000000000000000","title_slug":"search-in-a-binary-search-tree"}