{"id":344339230,"lang":"cpp","time":"2 years, 3 months","timestamp":1590387462,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/344339230/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"11.2 MB","code":"class Solution {\npublic:\n    int search(vector<int>& nums, int target) {\n      int low=0;\n      int high = nums.size()-1;\n        int key =target;\n      while(low <=high){\n          int mid =(low+high)/2;\n          if(nums[mid] == target) return mid;\n          if(nums[low]<=nums[mid]){ // left half of nums[lows,......,mid] is sorted now so searh in this half\n              if(key >=nums[low] && key <nums[mid]){ // we have out target in half [low,....mid] so reduce  your search  and not that equal to mid is covered at top \n                  high =mid-1;\n              }\n              else \n                  low =mid+1; // we didn't find elememt in  this sorted half [low.,,,mid] so now we need to search in [mid,.....,high] \n               \n          }\n          else { // right half is sorted\n              if(key >nums[mid] && key <=nums[high]){ // we got our tartget in second sorted half and not that equal to mid is covered at top\n                  low =mid+1; \n              }\n              else \n                  high =mid-1;\n          }\n      }\n        return -1;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array"}