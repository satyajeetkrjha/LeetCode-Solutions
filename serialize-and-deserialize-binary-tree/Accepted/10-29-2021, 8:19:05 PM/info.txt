{"id":579232051,"lang":"cpp","time":"10Â months","timestamp":1635553145,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/579232051/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"33 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        queue <TreeNode*> q;\n        q.push(root);\n        string res =\"\";\n        while(!q.empty()){\n            TreeNode* temp = q.front();\n            q.pop();\n            if(temp == NULL){\n                res +=\"NULL \";\n            }\n            else{\n                res +=to_string(temp->val)+\" \";\n                q.push(temp->left);\n                q.push(temp->right);\n            }\n        }\n        cout <<\"res is \"<< res <<endl;\n        return res ;\n        \n    }\n    vector <string > split(string &s){\n        int start =0;\n        vector <string > res ;\n        for(int i =0 ;i<s.size();i++){\n            if(s[i] == ' '){\n                res.push_back(s.substr(start,i-start));\n                start = i+1;\n            }\n        }\n        return res ;\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        vector <string > res = split(data);\n        for(int i =0 ;i<res.size();i++){\n            cout << res[i]<< \" \";\n        }\n        cout <<endl;\n        if(res[0] == \"NULL\"){\n            return NULL;\n        }\n        queue <TreeNode*> q;\n        TreeNode* root = new TreeNode(stoi(res[0]+string()));\n        int i =0 ;\n        q.push(root);\n        while( i < res.size() && !q.empty()){\n            auto temp = q.front();\n            q.pop();\n            if(res[++i]!=\"NULL\"){\n                temp->left = new TreeNode(stoi(res[i]+string()));\n                q.push(temp->left);\n            }\n             if(res[++i] != \"NULL\"){\n                temp->right = new TreeNode(stoi(res[i] + string()));\n                q.push(temp->right);\n            }\n        }\n        return root;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree"}