{"id":603772355,"lang":"cpp","time":"8 months, 1 week","timestamp":1639878284,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/603772355/","is_pending":"Not Pending","title":"Shortest Distance from All Buildings","memory":"N/A","code":"class Solution {\npublic:\n    int dx[4] ={1,-1,0,0};\n    int dy[4] ={0,0,1,-1};\n    int bfs(vector<vector<int>>& grid ,int x,int y,int totalHouses){\n    \n        queue <pair <int,int> > q;\n        q.push({x,y});\n        \n        int d =0;\n        int steps =0;\n        \n        int rows = grid.size();\n        int columns = grid[0].size();\n        \n        vector <vector <bool>> visited(rows,vector<bool>(columns,false));\n        visited[x][y] = true;\n        \n        int housesReached =0;\n        \n        while(!q.empty() && housesReached!= totalHouses) {\n            int sz = q.size();\n            for(int i =0 ;i<sz;i++){\n                pair <int ,int> pr = q.front();\n                int r = pr.first;\n                int c = pr.second;\n                q.pop();\n                if(grid[r][c] ==1){\n                    d+= steps ;\n                    housesReached ++;\n                    continue;\n                    \n                }\n                for(int i =0;i<4;i++){\n                    int nr = r + dx[i];\n                    int nc = c+  dy[i];\n                    if(nr >= 0 && nc >=0 && nr < rows && nc <columns){\n                        if(!visited[nr][nc] && grid[nr][nc]!=2){\n                            visited[nr][nc] =true;\n                            q.push({nr,nc});\n                        }\n                    }\n                }\n                  \n                \n            }\n            steps ++;\n        }\n        \n        if(housesReached != totalHouses){\n            for(int i =0 ;i<rows;i++){\n                for(int j =0 ;j < columns ;j++){\n                    if(grid[i][j] ==0 && visited[i][j] ==1){\n                        grid[i][j] =2;\n                    }\n                }\n            }\n            return INT_MAX;\n        }\n        return d;\n        \n    }\n    \n    \n    \n    int shortestDistance(vector<vector<int>>& grid) {\n        int r = grid.size();\n        int c = grid[0].size();\n        int totalHouses = 0;\n        for(int i =0 ;i<r ;i++){\n            for(int j =0 ;j<c;j++){\n                if(grid[i][j] == 1){\n                    totalHouses ++;\n                }\n            }\n        }\n        \n        \n        int ans =INT_MAX;\n        for(int i =0 ;i<r ;i++){\n            for(int j =0 ;j<c ;j++){\n                if(grid[i][j] == 0){\n                    ans = min(ans,bfs(grid,i,j,totalHouses));\n                }\n            }\n        }\n        if(ans == INT_MAX){\n            return -1;\n        }\n        return ans ;\n        \n        \n        \n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"shortest-distance-from-all-buildings"}