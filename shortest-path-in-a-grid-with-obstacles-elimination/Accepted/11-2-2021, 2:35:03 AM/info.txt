{"id":580858026,"lang":"cpp","time":"9 months, 3 weeks","timestamp":1635834903,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/580858026/","is_pending":"Not Pending","title":"Shortest Path in a Grid with Obstacles Elimination","memory":"50.8 MB","code":"class Solution {\npublic:\n    int bfs(vector <vector <int>> & grid ,int k){\n        \n        int n = grid.size();\n        int m = grid[0].size();\n        \n        vector <vector <int> > visited(n,vector <int> (m,-1));\n        \n        queue <vector <int>> q;\n        q.push({0,0,0,k}) ; // r ,c , current length , k obstacles\n        while(!q.empty()){\n            auto cur = q.front();\n            q.pop();\n            int r = cur[0];\n            int c = cur[1];\n            int len = cur[2];\n            int obstacle = cur[3];\n            \n            if(r < 0 || c < 0 || r >= n || c >=m){\n                continue;\n            }\n            \n            if ( r == n-1 && c == m-1){\n                return len;\n            }\n            \n            if(grid[r][c] ==1){\n                if(obstacle > 0){\n                    obstacle --;\n                }\n                else{\n                    continue;\n                }\n            }\n            if(visited[r][c]!= -1 &&  visited[r][c] >= obstacle){\n                continue;\n            }\n            visited[r][c] = obstacle ;\n            q.push({r+1,c,len+1,obstacle});\n            q.push({r,c+1,len+1,obstacle});\n            q.push({r-1,c,len+1,obstacle});\n            q.push({r,c-1,len+1,obstacle});\n            \n            \n        }\n        return -1;\n    }\n    \n    int shortestPath(vector<vector<int>>& grid, int k) {\n       int ans  = bfs(grid,k);\n        return ans ;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-a-grid-with-obstacles-elimination"}