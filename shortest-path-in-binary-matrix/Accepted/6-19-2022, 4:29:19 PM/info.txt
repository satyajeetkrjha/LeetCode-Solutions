{"id":726219966,"lang":"cpp","time":"2 months, 1 week","timestamp":1655670559,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/726219966/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"19.3 MB","code":"class Solution {\npublic:\n    \n    \n    int dx [8] ={-1,-1,1,1,-1,0,0,1};\n      int dy[8] = {-1,1,-1,1,0,1,-1,0};\n    \n    \n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int visited[n+1][m+1];\n        \n        queue <pair <int,int> > q ;\n        if(grid[0][0]!=0 || grid[n-1][m-1]!=0)\n            return -1;\n        q.push({0,0});\n        int dist[n+1][m+1] ;\n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j< m;j++){\n                dist[i][j] =INT_MAX;\n                visited[i][j] =0;\n            }\n        }\n        dist[0][0] =1 ;\n        visited[0][0] = 1;\n        while(!q.empty()){\n            auto cur = q.front();\n            q.pop();\n            int r = cur.first ;\n            int c = cur.second ;\n            \n            for(int i =0 ;i<8;i++){\n                int nr = cur.first +dx[i];\n                int nc = cur.second+dy[i];\n                \n                \n              \n                 // neighbour is a good place\n                if(nr>=0 && nr< grid.size() && nc>=0 && nc<grid[0].size() && !visited[nr][nc] && grid[nr][nc] ==0 && (dist[nr][nc] >dist[r][c]+1)){ \n                   dist[nr][nc] = dist[r][c]+1;\n                    q.push({nr,nc});\n                    visited[nr][nc] =1 ;\n                }\n            }\n        }\n        \n        return dist[n-1][m-1] == INT_MAX  ? -1 : dist[n-1][m-1];\n        \n        \n        \n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix"}