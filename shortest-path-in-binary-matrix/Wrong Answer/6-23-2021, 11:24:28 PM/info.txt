{"id":512358723,"lang":"cpp","time":"1 year, 2 months","timestamp":1624505068,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/512358723/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"N/A","code":"class Solution {\npublic:\n    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {\n      int dx [8] ={-1,-1,1,1,-1,0,0,1};\n      int dy[8] = {-1,1,-1,1,0,1,-1,0};\n      bool visited[105][105];\n      memset(visited,false ,sizeof(visited));\n      int n = grid[0].size();\n        // edge case\n      if(grid[0][0] ==1 || grid[n-1][n-1] ==1){\n          return -1;\n      }\n        queue <pair <int,int> > q; // stores row number and column number\n        q.push(make_pair(0,0));\n        visited[0][0]=true;\n        int steps =1;\n        while(!q.empty()){\n            int sz = q.size();\n            for(int i=0;i<sz;i++){\n                pair <int,int> cur =q.front();\n                q.pop();\n                if(cur.first == n-1 && cur.second == n-1){\n                    return steps;\n                }\n                for(int i =0;i<8;i++){\n                    int nr = cur.first+dx[i];\n                    int nc = cur.second +dy[i];\n                    if(nr>=0 && nr< grid.size() && nc>=0 && nc<grid[0].size() && !visited[nr][nc] && grid[nr][nc] ==0){\n                        q.push(make_pair(nr,nc));\n                        visited[nr][nc] =true;\n                    }\n                }\n            }\n            steps ++;\n        }\n        return steps ;\n    }\n};","compare_result":"1111111111111111111111111111111111111101110110111100111111110110100000110111111111111111","title_slug":"shortest-path-in-binary-matrix"}