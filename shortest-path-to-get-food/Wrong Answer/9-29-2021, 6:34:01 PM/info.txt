{"id":563166790,"lang":"cpp","time":"11Â months","timestamp":1632954841,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/563166790/","is_pending":"Not Pending","title":"Shortest Path to Get Food","memory":"N/A","code":"class Solution {\npublic:\n    int getFood(vector<vector<char>>& grid) {\n        \n       //[(0, -1), (0, 1), (1, 0), (-1,0)] \n       int dx[4]={0 ,0 ,1,-1};\n       int dy[4]={-1,1,0,0};\n       if(grid.size() == 0 || grid[0].size() ==0){\n           return 0 ;\n       } \n        int n = grid.size();int m = grid[0].size();\n        queue <pair <int ,int> > q;\n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j<m;j++){\n                if(grid[i][j] == '*'){\n                    q.push({i,j});\n                    break;\n                }\n            }\n        }\n        \n        int steps = 0 ;\n        while(!q.empty()){\n            steps ++ ;\n            for(int i =0 ;i<q.size();i++){\n                auto[r,c] = q.front();q.pop();\n                for(int i =0 ;i<4;i++){\n                    int nr = r+ dx[i];\n                    int nc = c+ dy[i];\n                    \n                    if( nr < 0 || nc <0 || nr >=n  || nc >= m || grid[nr][nc]=='X')\n                        continue ;\n                    \n                    if(grid[nr][nc] == '#')\n                        return steps ;\n                    \n                    grid[nr][nc] = 'X';\n                    q.push({nr,nc});\n                        \n                        \n                    }\n                }\n            }\n        return -1 ;\n        }\n        \n};","compare_result":"0110111111111111011101111101011000100001101000100111100100000000110010001000000001000","title_slug":"shortest-path-to-get-food"}