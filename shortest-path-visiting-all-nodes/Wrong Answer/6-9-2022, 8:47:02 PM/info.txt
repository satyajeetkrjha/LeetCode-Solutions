{"id":718494723,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1654822022,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/718494723/","is_pending":"Not Pending","title":"Shortest Path Visiting All Nodes","memory":"N/A","code":"class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        \n        int n = graph.size();\n        if( n  == 0)\n            return 0;\n        int finalstate  =  (1<< n) -1 ; // if 3 then 111 and if 4 then 1111\n        \n        queue <pair <int ,int> > q ; // node and bit state\n       \n        vector <vector <int> > visited(n,vector <int> (finalstate+1,0));\n       \n        for(int i =0 ;i< n;i++){\n            q.push({i,1 <<i});\n        }\n        \n        int ans =0 ;\n        \n        while(!q.empty()){\n            \n            int sz = q.size();\n             ans++;\n            for(int i =0 ;i<sz;i++){\n              auto cur = q.front();\n              q.pop();\n            int node = cur.first ;\n            int curnodebitstate = cur.second ;\n            for(auto neighbor :graph[node]){\n                int newvisitednodebitstate = curnodebitstate | ( 1<< neighbor);\n                if(visited[neighbor][newvisitednodebitstate]  == 1){\n                    continue;\n                }\n                visited[neighbor][newvisitednodebitstate] = 1;\n                \n                if(newvisitednodebitstate == finalstate)\n                    return ans ;\n                q.push({ neighbor,newvisitednodebitstate});\n            }\n          }\n            \n        }\n        return -1;\n    }\n};","compare_result":"110111111111111111111111111111111111111111111111111","title_slug":"shortest-path-visiting-all-nodes"}