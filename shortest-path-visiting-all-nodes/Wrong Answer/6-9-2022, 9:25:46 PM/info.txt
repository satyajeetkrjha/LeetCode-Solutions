{"id":718511335,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1654824346,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/718511335/","is_pending":"Not Pending","title":"Shortest Path Visiting All Nodes","memory":"N/A","code":"class Solution {\npublic:\n    int shortestPathLength(vector<vector<int>>& graph) {\n        int n =  graph.size();\n        queue <pair <int ,int> > q ; // node and bit state \n        int finalstate = (1 << n )-1;\n        vector <vector <int> > visited(n,vector <int>(finalstate+1,0));\n        \n        for(int i =0 ;i<n;i++){\n            q.push({i,1 <<i});\n        }\n        \n        int ans =0;\n        while(!q.empty()){\n            int sz = q.size();\n            ans ++;\n            for(int i  =0 ;i<sz;i++){\n                auto cur  = q.front();\n                q.pop();\n                int node = cur.first ;\n                int curnodestae = cur.second ;\n                for(auto neighbor :graph[node]){\n                    // set ith bit in cur state to \n                    int neighborstate = curnodestae | (1 << neighbor);\n                    if(visited[neighbor][neighborstate]){\n                        continue ;\n                    }\n                    if(neighborstate == finalstate){\n                        return ans ;\n                    }\n                    visited[neighbor][neighborstate] = 1;\n                    q.push({neighbor,neighborstate});\n                }\n            }\n        }\n        return -1;    \n    }\n};","compare_result":"110111111111111111111111111111111111111111111111111","title_slug":"shortest-path-visiting-all-nodes"}