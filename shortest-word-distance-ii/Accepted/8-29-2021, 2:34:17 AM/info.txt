{"id":545992071,"lang":"cpp","time":"12Â months","timestamp":1630218857,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/545992071/","is_pending":"Not Pending","title":"Shortest Word Distance II","memory":"19.7 MB","code":"class WordDistance {\npublic:\n    unordered_map<string ,vector<int> >m;\n    WordDistance(vector<string>& wordsDict) {\n        for(int i =0;i<wordsDict.size();i++){\n            string s= wordsDict[i];\n            m[s].push_back(i);\n        }\n    }\n    \n    int shortest(string word1, string word2) {\n       \n       // sorted vector of indices for first word and second word\n       vector<int> first = m[word1];\n       vector<int> second =m[word2];\n        \n       int l1 =0 ;int l2=0 ;\n       int dist = INT_MAX;\n       while(l1<first.size() && l2<second.size()){\n         dist = min(dist,first[l1] >second[l2]?first[l1]-second[l2]:second[l2]-first[l1]);\n           if(first[l1]>second[l2]){\n               l2++;\n           }\n           else{\n               l1++;\n           }  \n       }\n        return dist ;\n        \n        \n       \n        \n    }\n};\n\n/**\n * Your WordDistance object will be instantiated and called as such:\n * WordDistance* obj = new WordDistance(wordsDict);\n * int param_1 = obj->shortest(word1,word2);\n */","compare_result":"111111111111","title_slug":"shortest-word-distance-ii"}