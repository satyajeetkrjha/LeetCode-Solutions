{"id":571584743,"lang":"cpp","time":"10 months, 2 weeks","timestamp":1634292272,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/571584743/","is_pending":"Not Pending","title":"Snakes and Ladders","memory":"12.3 MB","code":"class Solution {\npublic:\n    \n    pair <int ,int > coordinates (int x ,int n){\n        int r = n -(x-1)/n -1;\n        int c = (x-1)% n;\n        if( r % 2 == n % 2){\n            return {r,n-c-1};\n        }\n        return {r,c};\n        \n    }\n    \n    int snakesAndLadders(vector<vector<int>>& board) {\n        \n      int n = board.size() ;\n      bool visited[n+1][n+1];\n      \n        \n      memset(visited ,false,sizeof(visited)); \n      \n      int steps = 0;\n      queue <int> q ;\n      q.push(1);\n      visited[n-1][0] = true ;\n      while(!q.empty()){\n          int sz = q.size();\n          for(int i =0 ;i<sz;i++){\n              int x = q.front();\n              if(x == (n*n))\n                  return steps ;\n              q.pop();\n              for(int j = 1;j<=6;j++){\n                  if(j+ x> n*n)\n                      break;\n                  pair <int ,int> cur = coordinates(x+j,n);\n                  if(visited[cur.first][cur.second])\n                      continue ;\n                  visited[cur.first][cur.second] = true;\n                  if(board[cur.first][cur.second]!=-1){\n                      q.push(board[cur.first][cur.second]);\n                  }\n                  else{\n                      q.push(j+x);\n                  }\n                  \n              }\n          }\n          steps ++;\n          \n      }\n        return -1;\n        \n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"snakes-and-ladders"}