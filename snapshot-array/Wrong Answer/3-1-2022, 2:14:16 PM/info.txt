{"id":651424611,"lang":"cpp","time":"5 months, 3 weeks","timestamp":1646162056,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/651424611/","is_pending":"Not Pending","title":"Snapshot Array","memory":"N/A","code":"class SnapshotArray {\npublic:\n\n    /*\n    \n    Let us suppose that you are index 1 and in the first snapshot,the value was 10 \n    and at same index ,now it's second snapshot and value is 20.\n    so we have\n    map <int ,map <int,int> > snaps ; \n    for index 1  and snapshot id 2 , you have value 10 so map inside a map .\n    Think hard satya when you see this again.Nothing fancy\n\n    */\n    map <int ,map <int ,int > > m;\n    int snapId =0;\n    SnapshotArray(int length) {\n        for(int i =0 ;i< length ;i++){\n            map <int ,int> temp ; // this is for hey at this snapid ,value is 10;\n            m[i] = temp;\n        }\n    }\n    \n    void set(int index, int val) {\n        m[index][snapId] = val;\n    }\n    \n    int snap() {\n        return snapId++;\n    }\n    \n    int get(int index, int snap_id) {\n        \n        /*\n        for(auto it :m){\n            cout << it.first << \" \";\n            for(auto [a,b]:it.second){\n                cout << a<< \" \"<< b << \" \"<< \"*\";\n            }\n            cout << endl;\n        }\n        */\n       return m[index][snap_id];\n    }\n};\n\n/**\n * Your SnapshotArray object will be instantiated and called as such:\n * SnapshotArray* obj = new SnapshotArray(length);\n * obj->set(index,val);\n * int param_2 = obj->snap();\n * int param_3 = obj->get(index,snap_id);\n */","compare_result":"111111111011111111100011111111111101001001011010010010010000000000011111","title_slug":"snapshot-array"}