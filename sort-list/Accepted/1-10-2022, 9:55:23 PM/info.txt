{"id":617340941,"lang":"cpp","time":"7 months, 2 weeks","timestamp":1641869723,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/617340941/","is_pending":"Not Pending","title":"Sort List","memory":"29.1 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    \n    ListNode* merge(ListNode* l1 ,ListNode* l2){\n        if(l1 == NULL) return l2 ;\n        if(l2 == NULL) return l2 ;\n        \n        ListNode* head =NULL;\n        if(l1->val < l2->val){\n            head = l1 ;\n            l1 = l1->next;\n        }\n        else{\n            head = l2 ;\n            l2 = l2->next;\n        }\n        \n        ListNode* p = head ;\n        while(l1 && l2){\n            if(l1->val < l2->val){\n                p->next = l1 ;\n                l1 = l1->next;\n            }\n            else{\n                p->next = l2 ;\n                l2 = l2 ->next;\n            }\n              p = p->next ;\n        }\n        \n        if(l1){\n            p->next = l1 ;\n        }\n        else {\n            p->next = l2 ;\n        }\n      \n        return head ;\n        \n    }\n    \n    ListNode* sortList(ListNode* head) {\n    \n        if (head == NULL || head->next == NULL)\n                return head;\n        \n        ListNode* slow = head ;\n        ListNode* fast = head->next ;\n        while(fast && fast->next){\n            slow = slow->next ;\n            fast = fast->next->next;\n        }\n        \n        // slow points to the middle of the linked list \n        fast = slow->next ;\n        slow->next =NULL;\n        \n        return merge(sortList(head) ,sortList(fast));\n        \n    }\n};","compare_result":"1111111111111111111111111111","title_slug":"sort-list"}