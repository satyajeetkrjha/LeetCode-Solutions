{"id":357131417,"lang":"cpp","time":"2 years, 2 months","timestamp":1592863303,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/357131417/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"29.6 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isidentical(TreeNode* s, TreeNode* t){\n        if( s == NULL && t==NULL){\n            return true;\n        }\n        if(s ==NULL || t==NULL)\n            return false;\n        \n        return (s->val == t->val  &&  isidentical(s->left,t->left)  && isidentical(s->right,t->right));\n    }\n    bool isSubtree(TreeNode* s, TreeNode* t) {\n        if(t ==NULL){ // we want to check if t is a subtree if s and t is empty\n            return true;\n        }\n        if(s==NULL){ // we are checking in s and s tree is null\n            return false;\n        }\n        if(isidentical(s,t))\n            return true;\n        \n        return isSubtree(s->left,t) || isSubtree(s->right,t);\n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree"}