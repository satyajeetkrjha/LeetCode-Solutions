{"id":753346068,"lang":"cpp","time":"1Â month","timestamp":1658454254,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/753346068/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    \n    bool isIdentical(TreeNode* p ,TreeNode* q){\n        if(p ==  NULL &&  q==NULL)\n            return true ;\n        if(p ==NULL ||  q ==  NULL)\n            return false ;\n      //  cout <<\"reached\"<<p->val <<\" \"<< q->val << \" \"<<endl;\n        return p->val == q->val && isIdentical(p->left,q->left) && isIdentical(p->right ,q->right);\n    }\n    \n    \n    \n    bool isSubtree(TreeNode* root, TreeNode* subRoot) {\n       if(root == NULL && subRoot == NULL)\n           return true ;\n        if(root== NULL || subRoot ==NULL)\n            return false ;\n       \n        return isIdentical(root->left,subRoot ) || isIdentical(root->right,subRoot);\n    }\n};","compare_result":"11101111111001111111111111111111100000000000000000000001000000010010000010000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree"}