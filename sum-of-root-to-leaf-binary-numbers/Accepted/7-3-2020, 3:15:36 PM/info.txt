{"id":361654318,"lang":"cpp","time":"2 years, 1 month","timestamp":1593803736,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/361654318/","is_pending":"Not Pending","title":"Sum of Root To Leaf Binary Numbers","memory":"23.4 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n#include <cmath>\nclass Solution {\npublic:\n    vector<vector<int>>res;\n    int sumRootToLeaf(TreeNode* root) {\n        if(root ==NULL)\n            return 0;\n        vector <int> temp;\n        dfs(root,temp);\n        int result=0;\n        for(int i=0;i<res.size();i++){\n          result+= binary_conversion(res[i]);\n        }\n        return result;\n    }\n    int binary_conversion(vector <int> v){\n        int count =0;\n        int result =0;\n        for(int i=v.size()-1;i>=0;i--){\n            int val =pow(2,count);\n            val = val*v[i];\n            result+=val;\n            count++;\n        }\n        \n        cout<<\"result \"<<result <<endl;\n        return result;\n    }\n    \n    void dfs(TreeNode* root,vector <int> temp){\n        temp.push_back(root->val);\n        if(root->left ==NULL && root->right ==NULL){\n            res.push_back(temp);\n        }\n        else{\n            if(root->left){\n                dfs(root->left,temp);\n            }\n            if(root->right){\n                dfs(root->right,temp);\n            }\n        }\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-root-to-leaf-binary-numbers"}