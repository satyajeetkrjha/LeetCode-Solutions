{"id":632633277,"lang":"cpp","time":"6 months, 3 weeks","timestamp":1643767161,"status_display":"Accepted","runtime":"270 ms","url":"/submissions/detail/632633277/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"44.2 MB","code":"typedef long long ll;\nclass Solution {\npublic:\n    int sumSubarrayMins(vector<int>& arr) {\n        \n        int n = arr.size();\n        vector <int> left(n);\n        vector<int> right(n);\n        stack <pair<int ,int> > previous ,next ;\n        \n        for(int i =0 ;i<n ;i++){\n            left[i] = i+1;\n            right[i] = n-i;\n        }\n        \n        for(int i =0 ;i< n;i++){\n            \n            \n            while(!previous.empty() && previous.top().first > arr[i]){\n                previous .pop();\n            }\n            \n            left[i] = previous.empty() ? i+1  : i-previous.top().second;\n            \n            previous.push({arr[i],i});\n            \n            \n            while(!next.empty() && next.top().first > arr[i]){\n                auto x = next.top();\n                next.pop();\n                right[x.second] = i - x.second;\n            }\n            next.push({arr[i],i});\n        }\n        \n        \n        const int MOD = 1e9+7;\n        int res = 0;\n       \n        for(int i =0 ;i<n ;i++){\n           long long prod = (left[i]*right[i])%MOD;\n            prod = (prod*arr[i])%MOD;\n            res = (res + prod)%MOD;\n        }\n        return res ;\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-subarray-minimums"}