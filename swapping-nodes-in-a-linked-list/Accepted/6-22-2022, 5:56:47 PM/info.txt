{"id":728811891,"lang":"cpp","time":"2Â months","timestamp":1655935007,"status_display":"Accepted","runtime":"803 ms","url":"/submissions/detail/728811891/","is_pending":"Not Pending","title":"Swapping Nodes in a Linked List","memory":"180.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* swapNodes(ListNode* head, int k) {\n        ListNode* ptr1 =head ;\n        ListNode* ptr2 ;\n        ListNode* kth ;\n        \n        for(int i =1 ;i<k;i++){\n            ptr1 = ptr1->next;\n        }\n        \n        cout <<ptr1->val << endl;\n        \n        \n        // now ptr1 is pointing to the kth node in linked list\n        // set kth node to point to this node\n        kth = ptr1;\n        ptr1 = ptr1->next ;\n        ptr2 = head ; // now ptr2 is k nodes behind ptr1\n        while(ptr1!=NULL){\n            ptr1 = ptr1->next ;\n            ptr2=  ptr2->next;\n        }\n        \n        // ptr1 reached end and ptr2 is still kth len behind it \n        // means ptr2 is at n-k place or k from behind and this is what we want\n        swap(ptr2->val,kth->val);\n        return head ;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"swapping-nodes-in-a-linked-list"}