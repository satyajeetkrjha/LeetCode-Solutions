{"id":756771027,"lang":"cpp","time":"1Â month","timestamp":1658796165,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/756771027/","is_pending":"Not Pending","title":"Swim in Rising Water","memory":"N/A","code":"class Solution {\npublic:\n    \n    int swimInWater(vector<vector<int>>& grid) {\n        \n        int n = grid.size();\n        priority_queue <vector<int>,vector <vector <int>>,greater <vector<int>>> pq;\n        pq.push({grid[0][0],0,0,}) ;\n        int visited[n+1][n+1];\n        memset(visited ,false,sizeof(false));\n        \n        int dx[4] ={1,-1,0,0};\n        int dy[4] ={0,0,-1,1};\n        visited[0][0] =1 ;\n        int maxTime =INT_MIN;\n        while(!pq.empty()){\n            auto cur = pq.top();\n            pq.pop();\n            int weight = cur[0] ;\n            maxTime = max(maxTime ,weight);\n            int r = cur[1];\n            int c = cur[2];\n            \n            if( r == n-1 && c == n-1){\n                return maxTime ;\n            }\n            for(int i =0 ;i<4;i++){\n                int nr = dx[i]+r;\n                int nc = dy[i]+c ;\n                if(nr >=0 && nc>=0 && nr < n && nc <n && !visited[nr][nc]){\n                    visited[nr][nc] = true ;\n                    pq.push({grid[nr][nc],nr,nc});\n                }\n            }            \n        }\n        return maxTime ;\n    }\n};","compare_result":"1011110000101001100100000000000010000000010","title_slug":"swim-in-rising-water"}