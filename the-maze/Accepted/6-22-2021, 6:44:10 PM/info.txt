{"id":511799417,"lang":"cpp","time":"1 year, 2 months","timestamp":1624401850,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/511799417/","is_pending":"Not Pending","title":"The Maze","memory":"18.6 MB","code":"class Solution {\npublic:\n    bool hasPath(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {\n        int R = maze.size();\n        int C = maze[0].size();\n        int visited[R+1][C+1];\n        for(int i=0;i<R;i++){\n            for(int j=0;j<C;j++){\n                visited[i][j] = 0 ;\n            }\n        }\n        int dx[4] ={0,0,-1,1};\n        int dy[4] ={1,-1,0,0};\n        queue <pair <int,int> > q;\n        q.push(make_pair(start[0],start[1]));\n        visited[start[0]][start[1]] = 1;\n        while(!q.empty()){\n            pair <int ,int> cur = q.front();\n            if(cur.first == destination[0] && cur.second == destination[1]){\n                return true ;\n            }\n            q.pop();\n            for(int i=0;i<4;i++){\n                int nr = cur.first+dx[i];\n                int nc = cur.second+dy[i];\n                \n                while( nr >=0 && nr< R && nc >=0 && nc< C && maze[nr][nc] ==0 ){\n                    nr +=dx[i];\n                    nc+=dy[i];\n                }\n                // if we move out of the above loop it means we have hit a wall or some position we cannot move and nr and nc are alreay incremented by dx[i] && dy[i] so first decrease it \n                if(!visited[nr -dx[i]][nc-dy[i]]){\n                    q.push(make_pair(nr-dx[i],nc-dy[i]));\n                    visited[nr-dx[i]][nc-dy[i]]=1;\n                } \n            }\n        }\n        return false ;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze"}