{"id":624285141,"lang":"cpp","time":"7 months, 1 week","timestamp":1642726818,"status_display":"Accepted","runtime":"226 ms","url":"/submissions/detail/624285141/","is_pending":"Not Pending","title":"Tree Diameter","memory":"23.3 MB","code":"class Solution {\npublic:\n    vector <int> adj[100005];\n    int treeDiameter(vector<vector<int>>& edges) {\n        \n        int startnode ;\n        for(auto edge: edges){\n            int u = edge[0];int v = edge[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n            startnode = u;\n        }\n        \n        // now do a bfs from this startnode to find first peripheral node \n        int dist [edges.size()+2];\n        int visited[edges.size()+2];\n        memset(visited,0,sizeof(visited));\n        \n        queue<int> q1;\n        q1.push(startnode);\n        visited[startnode]= 1;\n        int farthestnode =0;\n        while(!q1.empty()){\n            int u =q1.front();\n            q1.pop();\n            for(int i =0 ;i<adj[u].size();i++){\n                int v = adj[u][i];\n                if(!visited[v]){\n                    visited[v] = 1;\n                     q1.push(v);\n                }\n            }\n            if(q1.size() ==1){\n                farthestnode = q1.front();\n            }\n        }\n        \n       \n        \n        \n        memset(dist,INT_MAX,sizeof(dist));\n        memset(visited,0,sizeof(visited));\n        queue<int> q2 ;\n        q2.push(farthestnode);\n        dist[farthestnode] = 0;\n        visited[farthestnode] =1 ;\n        \n    \n        while(!q2.empty()){\n            int u = q2.front();\n            q2.pop();\n            cout <<\" u is \"<< u << endl;\n            for(int i =0 ;i<adj[u].size();i++){\n                int v = adj[u][i];\n                if(!visited[v]){\n                    cout <<\"v is \"<< v <<endl;\n                    dist[v] = dist[u]+1;\n                    visited[v] =1 ;\n                    q2.push(v);\n                }\n            }\n        }\n       \n        int ans =0;\n        for(int i =0 ;i<= edges.size();i++){\n          \n            ans = max(ans ,dist[i]);\n        }\n      \n        return ans ;\n        \n    \n                  \n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111","title_slug":"tree-diameter"}