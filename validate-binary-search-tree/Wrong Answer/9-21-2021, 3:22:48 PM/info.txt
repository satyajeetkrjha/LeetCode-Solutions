{"id":558782624,"lang":"cpp","time":"11 months, 1 week","timestamp":1632252168,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/558782624/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n       // do a simple inorder traversal and check if the array is sorted or not \n        if(!root) return true;\n        vector <int> v ;\n        stack <TreeNode*> st;\n        TreeNode* cur = root ;\n        while(!st.empty() || cur!=NULL){\n            // keep going left and push all of them in stack\n            while(cur!=NULL){\n                st.push(cur);\n                cur = cur->left;\n            }\n            cout <<\"stack size is \"<<st.size()<<endl;\n             cur = st.top();\n             st.pop();\n            cout<<\"cur->val is \"<<cur->val <<endl;\n            v.push_back(cur->val);\n             cur = cur->right;\n        }\n        cout <<\"size of vector is \"<<v.size()<<endl;\n        for(int i =0 ;i<v.size()-1;i++){\n            if(v[i]>v[i+1])\n                return false;\n        }\n        \n        return true;\n        \n    }\n};","compare_result":"11110001111111111011111111111111111111110111111111111111101111000011111111111001","title_slug":"validate-binary-search-tree"}