{"id":730229086,"lang":"cpp","time":"2Â months","timestamp":1656087080,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/730229086/","is_pending":"Not Pending","title":"Walls and Gates","memory":"14.4 MB","code":"class Solution {\npublic:\n    const int INF = 2147483647;\n    int dx[4] = {1,-1,0,0};\n    int dy[4] = {0,0,-1,1};\n    queue <pair <int ,int> > q ;\n    void wallsAndGates(vector<vector<int>>& rooms) {\n        int n = rooms.size();\n        int m = rooms[0].size();\n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j<m;j++){\n                if(rooms[i][j] == 0){\n                    q.push({i,j});\n                }\n            }\n        }\n        \n        while(!q.empty()){\n            auto cur = q.front();\n            q.pop();\n            int r = cur.first ;\n            int c = cur.second ;\n            for(int i =0 ;i<4 ;i++){\n                int nr = r + dx[i];\n                int nc = c+ dy[i];\n                if(nr>=0 && nr < n && nc>=0 && nc <m && rooms[nr][nc]==INF){\n                    rooms[nr][nc] = rooms[r][c]+1;\n                    q.push({nr,nc});\n                }\n            }\n        }\n        return ; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates"}