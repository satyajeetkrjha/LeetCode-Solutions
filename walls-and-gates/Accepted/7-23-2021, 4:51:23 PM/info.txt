{"id":527235402,"lang":"cpp","time":"1 year, 1 month","timestamp":1627073483,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/527235402/","is_pending":"Not Pending","title":"Walls and Gates","memory":"14.5 MB","code":"class Solution {\npublic:\n    const int WALL = -1;\n    const int EMPTY = 2147483647;\n    const int GATE = 0;\n    \n    int dx[4] ={-1,1,0,0};\n    int dy[4] ={0,0,1,-1};\n    void wallsAndGates(vector<vector<int>>& rooms) {\n        int n = rooms.size();\n        int m = rooms[0].size();\n        \n        queue < pair <int ,int> > q;\n        \n        // push all gates in queue and we will do a bfs from these gates\n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j<m;j++){\n                if(rooms[i][j] == GATE){\n                    q.push(make_pair(i,j));\n                }\n            }\n        }\n        \n        while(!q.empty()){\n             pair <int ,int> val = q.front();\n             q.pop();\n            \n            int r = val.first;\n            int c = val.second ;\n            \n             for(int i =0 ;i<4;i++){\n                 int nr = r+ dx[i];\n                 int nc = c+dy[i];\n                 \n                 if(nr <0 || nr >= n || nc <0 || nc >=m || rooms[nr][nc] == WALL || rooms[nr][nc] <=rooms[r][c]+1)\n                     continue;\n                     else\n                 {\n                     rooms[nr][nc] = rooms[r][c]+1;\n                     q.push(make_pair(nr,nc));\n                 }\n                 \n             }\n            \n            \n        }\n        return ;\n        \n        \n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates"}