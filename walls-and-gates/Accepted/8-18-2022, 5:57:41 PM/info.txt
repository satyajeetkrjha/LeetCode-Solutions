{"id":777284472,"lang":"cpp","time":"1Â week","timestamp":1660859861,"status_display":"Accepted","runtime":"39 ms","url":"/submissions/detail/777284472/","is_pending":"Not Pending","title":"Walls and Gates","memory":"14.4 MB","code":"class Solution {\npublic:\n    void wallsAndGates(vector<vector<int>>& rooms) {\n        const int INF = 2147483647;\n        int n = rooms.size();\n        int m = rooms[0].size();\n        queue <pair <int ,int> > q;\n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j<m;j++){\n                if(rooms[i][j] == 0){\n                    q.push({i,j});\n                }\n            }\n        }\n        int dx[4] ={1,-1,0,0};\n        int dy[4] ={0,0,-1,1};\n        while(!q.empty()){\n            int sz = q.size();\n            for(int i =0 ;i<sz;i++){\n                auto [r,c] = q.front();\n                q.pop();\n                for(int i =0 ;i<4;i++){\n                    int nr = r+dx[i];\n                    int nc = c+dy[i];\n                    if(nr>=0 && nc>=0 && nr <n && nc <m && rooms[nr][nc] == INF){\n                        rooms[nr][nc] = rooms[r][c]+1;\n                        q.push({nr,nc});\n                    }\n                }\n            }\n        }\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates"}