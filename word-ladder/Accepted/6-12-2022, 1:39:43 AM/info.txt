{"id":720218365,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1655012383,"status_display":"Accepted","runtime":"634 ms","url":"/submissions/detail/720218365/","is_pending":"Not Pending","title":"Word Ladder","memory":"14.4 MB","code":"class Solution {\npublic:\n     map < string ,int> visited ;\n      queue <string> q ;\n     void transform (string word,vector<string>& wordList){\n            // make changes \n            for(int i =0 ;i< word.size();i++){\n                  for(char c = 'a';c<='z';c++){\n                      string temp = word ;\n                      temp[i] = c;\n                      // temp exists in the wordlist and is not visited yet\n                      if(visited.find(temp)!= visited.end()){\n                         if(visited[temp] == 0){\n                             visited[temp] =1;\n                             q.push(temp);\n                         }\n                      }\n                  }\n            }\n        }\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList)        \n    {\n     \n      \n        for(int i =0 ;i< wordList.size();i++){\n            visited[wordList[i]] =0 ;\n        }\n        q.push(beginWord);\n        \n        int level =0 ;\n        bool flag = false ;\n        \n       \n        \n        visited[beginWord]++;\n     \n        while(!q.empty()){\n            int sz = q.size();\n            level ++;\n            for(int i =0 ;i<sz;i++){\n                auto cur = q.front();\n                q.pop();\n                \n                if( cur == endWord){\n                    flag = true ;\n                    return level ;\n                }\n                \n                // make all possible changes \n                transform(cur,wordList);\n            }\n        }\n        return 0; \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder"}