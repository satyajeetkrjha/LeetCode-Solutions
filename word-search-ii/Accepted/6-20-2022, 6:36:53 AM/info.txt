{"id":726651098,"lang":"cpp","time":"2Â months","timestamp":1655721413,"status_display":"Accepted","runtime":"1083 ms","url":"/submissions/detail/726651098/","is_pending":"Not Pending","title":"Word Search II","memory":"13.2 MB","code":"int dx[4] ={1,-1,0,0};\nint dy[4] ={0,0,1,-1};\n\nstruct Node{\n    Node* links[26];\n    string* word;\n    \n    bool containsKey(char ch){\n        return (links[ch-'a'] != NULL);\n    }\n    \n    Node* get(char ch){\n        return links[ch-'a'];\n    }\n    \n    void put (char ch ,Node* node){\n        links[ch-'a']  =node;\n    }    \n};\n\n\n\nclass Solution {\n\n    private:\n    Node* root ;\n    vector <string> ans;\n    \npublic:\n   \n\n    Solution(){\n        root = new Node();\n    }\n     \n    void insert( string &word){\n        Node* node = root;\n        int n = word.size();\n        for(int i =0 ;i<n;i++){\n            char ch = word[i];\n            if(!node->containsKey(ch)){\n                node->put(ch,new Node());\n            }\n            node = node->get(ch);\n        }\n        node->word = &word;\n        cout <<*node->word <<endl;\n    }\n    \n    \n    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {\n      \n        for(int i =0 ;i<words.size();i++){\n           insert(words[i]);\n        }\n        \n        int n = board.size();\n        int m = board[0].size();\n        \n        Node* node = root ;\n       \n        \n        for(int i =0 ;i<n;i++){\n            for(int j =0 ;j<m ;j++){\n                dfs(board,i,j,node);\n            }\n        }\n    \n        return ans;\n        \n    }\n    \n    void dfs(vector<vector<char>>& board ,int r ,int c,Node* node){\n        \n        if( r < 0 || c <0 ||  r>= board.size() || c>= board[0].size() || board[r][c]  == '#'|| node->containsKey(board[r][c]) ==NULL){\n            return ;\n        }\n        char originalchar = board[r][c];\n        node = node->get(originalchar);\n        if(node->word!=NULL){\n            ans.push_back(*node->word);\n            node->word =NULL;\n        }\n        board[r][c] = '#';\n        for(int k =0;k<4;k++){\n            dfs(board,r+dx[k],c+dy[k],node);\n        }\n        board[r][c] = originalchar;\n        \n        \n    }\n    \n    \n    \n    \n    \n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii"}